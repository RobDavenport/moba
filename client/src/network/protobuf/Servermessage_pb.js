// source: ServerMessage.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.ServerMessage', null, global);
goog.exportSymbol('proto.ServerMessage.EntityData', null, global);
goog.exportSymbol('proto.ServerMessage.EntityData.OptionEnergyCase', null, global);
goog.exportSymbol('proto.ServerMessage.EntityData.OptionEntityTypeDataCase', null, global);
goog.exportSymbol('proto.ServerMessage.EntityData.OptionHealthCase', null, global);
goog.exportSymbol('proto.ServerMessage.EntityData.OptionRotationCase', null, global);
goog.exportSymbol('proto.ServerMessage.EntityData.OptionXCase', null, global);
goog.exportSymbol('proto.ServerMessage.EntityData.OptionYCase', null, global);
goog.exportSymbol('proto.ServerMessage.EntityDestroyed', null, global);
goog.exportSymbol('proto.ServerMessage.EntityTypeData', null, global);
goog.exportSymbol('proto.ServerMessage.EntityTypeData.CharacterData', null, global);
goog.exportSymbol('proto.ServerMessage.EntityTypeData.CharacterData.EnergyType', null, global);
goog.exportSymbol('proto.ServerMessage.EntityTypeData.CharacterData.OptionEnergyTypeCase', null, global);
goog.exportSymbol('proto.ServerMessage.EntityTypeData.CharacterData.OptionMaxEnergyCase', null, global);
goog.exportSymbol('proto.ServerMessage.EntityTypeData.CharacterData.OptionMaxHealthCase', null, global);
goog.exportSymbol('proto.ServerMessage.EntityTypeData.CoreData', null, global);
goog.exportSymbol('proto.ServerMessage.EntityTypeData.EntitydataCase', null, global);
goog.exportSymbol('proto.ServerMessage.EntityTypeData.MinionData', null, global);
goog.exportSymbol('proto.ServerMessage.EntityTypeData.TowerData', null, global);
goog.exportSymbol('proto.ServerMessage.MsgdataCase', null, global);
goog.exportSymbol('proto.ServerMessage.Snapshot', null, global);
goog.exportSymbol('proto.ServerMessage.Snapshot.OptionBaselineCase', null, global);
goog.exportSymbol('proto.ServerMessage.UpdateTick', null, global);
goog.exportSymbol('proto.ServerMessage.VerifiedUuid', null, global);
goog.exportSymbol('proto.ServerMessage.VerifyUuid', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ServerMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ServerMessage.oneofGroups_);
};
goog.inherits(proto.ServerMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ServerMessage.displayName = 'proto.ServerMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ServerMessage.UpdateTick = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ServerMessage.UpdateTick, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ServerMessage.UpdateTick.displayName = 'proto.ServerMessage.UpdateTick';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ServerMessage.VerifyUuid = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ServerMessage.VerifyUuid, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ServerMessage.VerifyUuid.displayName = 'proto.ServerMessage.VerifyUuid';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ServerMessage.VerifiedUuid = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ServerMessage.VerifiedUuid, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ServerMessage.VerifiedUuid.displayName = 'proto.ServerMessage.VerifiedUuid';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ServerMessage.EntityDestroyed = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ServerMessage.EntityDestroyed, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ServerMessage.EntityDestroyed.displayName = 'proto.ServerMessage.EntityDestroyed';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ServerMessage.Snapshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ServerMessage.Snapshot.repeatedFields_, proto.ServerMessage.Snapshot.oneofGroups_);
};
goog.inherits(proto.ServerMessage.Snapshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ServerMessage.Snapshot.displayName = 'proto.ServerMessage.Snapshot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ServerMessage.EntityData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ServerMessage.EntityData.oneofGroups_);
};
goog.inherits(proto.ServerMessage.EntityData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ServerMessage.EntityData.displayName = 'proto.ServerMessage.EntityData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ServerMessage.EntityTypeData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ServerMessage.EntityTypeData.oneofGroups_);
};
goog.inherits(proto.ServerMessage.EntityTypeData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ServerMessage.EntityTypeData.displayName = 'proto.ServerMessage.EntityTypeData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ServerMessage.EntityTypeData.CharacterData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ServerMessage.EntityTypeData.CharacterData.oneofGroups_);
};
goog.inherits(proto.ServerMessage.EntityTypeData.CharacterData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ServerMessage.EntityTypeData.CharacterData.displayName = 'proto.ServerMessage.EntityTypeData.CharacterData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ServerMessage.EntityTypeData.MinionData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ServerMessage.EntityTypeData.MinionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ServerMessage.EntityTypeData.MinionData.displayName = 'proto.ServerMessage.EntityTypeData.MinionData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ServerMessage.EntityTypeData.TowerData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ServerMessage.EntityTypeData.TowerData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ServerMessage.EntityTypeData.TowerData.displayName = 'proto.ServerMessage.EntityTypeData.TowerData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ServerMessage.EntityTypeData.CoreData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ServerMessage.EntityTypeData.CoreData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ServerMessage.EntityTypeData.CoreData.displayName = 'proto.ServerMessage.EntityTypeData.CoreData';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ServerMessage.oneofGroups_ = [[1,2,5,25,26]];

/**
 * @enum {number}
 */
proto.ServerMessage.MsgdataCase = {
  MSGDATA_NOT_SET: 0,
  UPDATETICK: 1,
  SNAPSHOT: 2,
  ENTITYDESTROYED: 5,
  VERIFYUUID: 25,
  VERIFIEDUUID: 26
};

/**
 * @return {proto.ServerMessage.MsgdataCase}
 */
proto.ServerMessage.prototype.getMsgdataCase = function() {
  return /** @type {proto.ServerMessage.MsgdataCase} */(jspb.Message.computeOneofCase(this, proto.ServerMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ServerMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.ServerMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ServerMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    updatetick: (f = msg.getUpdatetick()) && proto.ServerMessage.UpdateTick.toObject(includeInstance, f),
    snapshot: (f = msg.getSnapshot()) && proto.ServerMessage.Snapshot.toObject(includeInstance, f),
    entitydestroyed: (f = msg.getEntitydestroyed()) && proto.ServerMessage.EntityDestroyed.toObject(includeInstance, f),
    verifyuuid: (f = msg.getVerifyuuid()) && proto.ServerMessage.VerifyUuid.toObject(includeInstance, f),
    verifieduuid: (f = msg.getVerifieduuid()) && proto.ServerMessage.VerifiedUuid.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ServerMessage}
 */
proto.ServerMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ServerMessage;
  return proto.ServerMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ServerMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ServerMessage}
 */
proto.ServerMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ServerMessage.UpdateTick;
      reader.readMessage(value,proto.ServerMessage.UpdateTick.deserializeBinaryFromReader);
      msg.setUpdatetick(value);
      break;
    case 2:
      var value = new proto.ServerMessage.Snapshot;
      reader.readMessage(value,proto.ServerMessage.Snapshot.deserializeBinaryFromReader);
      msg.setSnapshot(value);
      break;
    case 5:
      var value = new proto.ServerMessage.EntityDestroyed;
      reader.readMessage(value,proto.ServerMessage.EntityDestroyed.deserializeBinaryFromReader);
      msg.setEntitydestroyed(value);
      break;
    case 25:
      var value = new proto.ServerMessage.VerifyUuid;
      reader.readMessage(value,proto.ServerMessage.VerifyUuid.deserializeBinaryFromReader);
      msg.setVerifyuuid(value);
      break;
    case 26:
      var value = new proto.ServerMessage.VerifiedUuid;
      reader.readMessage(value,proto.ServerMessage.VerifiedUuid.deserializeBinaryFromReader);
      msg.setVerifieduuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ServerMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ServerMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ServerMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUpdatetick();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ServerMessage.UpdateTick.serializeBinaryToWriter
    );
  }
  f = message.getSnapshot();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ServerMessage.Snapshot.serializeBinaryToWriter
    );
  }
  f = message.getEntitydestroyed();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.ServerMessage.EntityDestroyed.serializeBinaryToWriter
    );
  }
  f = message.getVerifyuuid();
  if (f != null) {
    writer.writeMessage(
      25,
      f,
      proto.ServerMessage.VerifyUuid.serializeBinaryToWriter
    );
  }
  f = message.getVerifieduuid();
  if (f != null) {
    writer.writeMessage(
      26,
      f,
      proto.ServerMessage.VerifiedUuid.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ServerMessage.UpdateTick.prototype.toObject = function(opt_includeInstance) {
  return proto.ServerMessage.UpdateTick.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ServerMessage.UpdateTick} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerMessage.UpdateTick.toObject = function(includeInstance, msg) {
  var f, obj = {
    frame: jspb.Message.getFieldWithDefault(msg, 1, 0),
    entitydata: (f = msg.getEntitydata()) && proto.ServerMessage.EntityData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ServerMessage.UpdateTick}
 */
proto.ServerMessage.UpdateTick.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ServerMessage.UpdateTick;
  return proto.ServerMessage.UpdateTick.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ServerMessage.UpdateTick} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ServerMessage.UpdateTick}
 */
proto.ServerMessage.UpdateTick.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFrame(value);
      break;
    case 2:
      var value = new proto.ServerMessage.EntityData;
      reader.readMessage(value,proto.ServerMessage.EntityData.deserializeBinaryFromReader);
      msg.setEntitydata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ServerMessage.UpdateTick.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ServerMessage.UpdateTick.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ServerMessage.UpdateTick} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerMessage.UpdateTick.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrame();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getEntitydata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ServerMessage.EntityData.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 frame = 1;
 * @return {number}
 */
proto.ServerMessage.UpdateTick.prototype.getFrame = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ServerMessage.UpdateTick} returns this
 */
proto.ServerMessage.UpdateTick.prototype.setFrame = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional EntityData entityData = 2;
 * @return {?proto.ServerMessage.EntityData}
 */
proto.ServerMessage.UpdateTick.prototype.getEntitydata = function() {
  return /** @type{?proto.ServerMessage.EntityData} */ (
    jspb.Message.getWrapperField(this, proto.ServerMessage.EntityData, 2));
};


/**
 * @param {?proto.ServerMessage.EntityData|undefined} value
 * @return {!proto.ServerMessage.UpdateTick} returns this
*/
proto.ServerMessage.UpdateTick.prototype.setEntitydata = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ServerMessage.UpdateTick} returns this
 */
proto.ServerMessage.UpdateTick.prototype.clearEntitydata = function() {
  return this.setEntitydata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ServerMessage.UpdateTick.prototype.hasEntitydata = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ServerMessage.VerifyUuid.prototype.toObject = function(opt_includeInstance) {
  return proto.ServerMessage.VerifyUuid.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ServerMessage.VerifyUuid} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerMessage.VerifyUuid.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ServerMessage.VerifyUuid}
 */
proto.ServerMessage.VerifyUuid.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ServerMessage.VerifyUuid;
  return proto.ServerMessage.VerifyUuid.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ServerMessage.VerifyUuid} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ServerMessage.VerifyUuid}
 */
proto.ServerMessage.VerifyUuid.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ServerMessage.VerifyUuid.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ServerMessage.VerifyUuid.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ServerMessage.VerifyUuid} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerMessage.VerifyUuid.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.ServerMessage.VerifyUuid.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ServerMessage.VerifyUuid} returns this
 */
proto.ServerMessage.VerifyUuid.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ServerMessage.VerifiedUuid.prototype.toObject = function(opt_includeInstance) {
  return proto.ServerMessage.VerifiedUuid.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ServerMessage.VerifiedUuid} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerMessage.VerifiedUuid.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ServerMessage.VerifiedUuid}
 */
proto.ServerMessage.VerifiedUuid.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ServerMessage.VerifiedUuid;
  return proto.ServerMessage.VerifiedUuid.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ServerMessage.VerifiedUuid} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ServerMessage.VerifiedUuid}
 */
proto.ServerMessage.VerifiedUuid.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ServerMessage.VerifiedUuid.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ServerMessage.VerifiedUuid.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ServerMessage.VerifiedUuid} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerMessage.VerifiedUuid.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ServerMessage.EntityDestroyed.prototype.toObject = function(opt_includeInstance) {
  return proto.ServerMessage.EntityDestroyed.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ServerMessage.EntityDestroyed} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerMessage.EntityDestroyed.toObject = function(includeInstance, msg) {
  var f, obj = {
    frame: jspb.Message.getFieldWithDefault(msg, 1, 0),
    replicationid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ServerMessage.EntityDestroyed}
 */
proto.ServerMessage.EntityDestroyed.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ServerMessage.EntityDestroyed;
  return proto.ServerMessage.EntityDestroyed.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ServerMessage.EntityDestroyed} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ServerMessage.EntityDestroyed}
 */
proto.ServerMessage.EntityDestroyed.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFrame(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setReplicationid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ServerMessage.EntityDestroyed.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ServerMessage.EntityDestroyed.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ServerMessage.EntityDestroyed} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerMessage.EntityDestroyed.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrame();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getReplicationid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 frame = 1;
 * @return {number}
 */
proto.ServerMessage.EntityDestroyed.prototype.getFrame = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ServerMessage.EntityDestroyed} returns this
 */
proto.ServerMessage.EntityDestroyed.prototype.setFrame = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 replicationId = 2;
 * @return {number}
 */
proto.ServerMessage.EntityDestroyed.prototype.getReplicationid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ServerMessage.EntityDestroyed} returns this
 */
proto.ServerMessage.EntityDestroyed.prototype.setReplicationid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ServerMessage.Snapshot.repeatedFields_ = [3];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ServerMessage.Snapshot.oneofGroups_ = [[2]];

/**
 * @enum {number}
 */
proto.ServerMessage.Snapshot.OptionBaselineCase = {
  OPTION_BASELINE_NOT_SET: 0,
  BASELINE: 2
};

/**
 * @return {proto.ServerMessage.Snapshot.OptionBaselineCase}
 */
proto.ServerMessage.Snapshot.prototype.getOptionBaselineCase = function() {
  return /** @type {proto.ServerMessage.Snapshot.OptionBaselineCase} */(jspb.Message.computeOneofCase(this, proto.ServerMessage.Snapshot.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ServerMessage.Snapshot.prototype.toObject = function(opt_includeInstance) {
  return proto.ServerMessage.Snapshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ServerMessage.Snapshot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerMessage.Snapshot.toObject = function(includeInstance, msg) {
  var f, obj = {
    frame: jspb.Message.getFieldWithDefault(msg, 1, 0),
    baseline: jspb.Message.getFieldWithDefault(msg, 2, 0),
    entitydataList: jspb.Message.toObjectList(msg.getEntitydataList(),
    proto.ServerMessage.EntityData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ServerMessage.Snapshot}
 */
proto.ServerMessage.Snapshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ServerMessage.Snapshot;
  return proto.ServerMessage.Snapshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ServerMessage.Snapshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ServerMessage.Snapshot}
 */
proto.ServerMessage.Snapshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFrame(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBaseline(value);
      break;
    case 3:
      var value = new proto.ServerMessage.EntityData;
      reader.readMessage(value,proto.ServerMessage.EntityData.deserializeBinaryFromReader);
      msg.addEntitydata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ServerMessage.Snapshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ServerMessage.Snapshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ServerMessage.Snapshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerMessage.Snapshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrame();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getEntitydataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ServerMessage.EntityData.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 frame = 1;
 * @return {number}
 */
proto.ServerMessage.Snapshot.prototype.getFrame = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ServerMessage.Snapshot} returns this
 */
proto.ServerMessage.Snapshot.prototype.setFrame = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 baseline = 2;
 * @return {number}
 */
proto.ServerMessage.Snapshot.prototype.getBaseline = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ServerMessage.Snapshot} returns this
 */
proto.ServerMessage.Snapshot.prototype.setBaseline = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.ServerMessage.Snapshot.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ServerMessage.Snapshot} returns this
 */
proto.ServerMessage.Snapshot.prototype.clearBaseline = function() {
  return jspb.Message.setOneofField(this, 2, proto.ServerMessage.Snapshot.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ServerMessage.Snapshot.prototype.hasBaseline = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated EntityData entityData = 3;
 * @return {!Array<!proto.ServerMessage.EntityData>}
 */
proto.ServerMessage.Snapshot.prototype.getEntitydataList = function() {
  return /** @type{!Array<!proto.ServerMessage.EntityData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ServerMessage.EntityData, 3));
};


/**
 * @param {!Array<!proto.ServerMessage.EntityData>} value
 * @return {!proto.ServerMessage.Snapshot} returns this
*/
proto.ServerMessage.Snapshot.prototype.setEntitydataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ServerMessage.EntityData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ServerMessage.EntityData}
 */
proto.ServerMessage.Snapshot.prototype.addEntitydata = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ServerMessage.EntityData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ServerMessage.Snapshot} returns this
 */
proto.ServerMessage.Snapshot.prototype.clearEntitydataList = function() {
  return this.setEntitydataList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ServerMessage.EntityData.oneofGroups_ = [[2],[3],[4],[5],[6],[7]];

/**
 * @enum {number}
 */
proto.ServerMessage.EntityData.OptionXCase = {
  OPTION_X_NOT_SET: 0,
  X: 2
};

/**
 * @return {proto.ServerMessage.EntityData.OptionXCase}
 */
proto.ServerMessage.EntityData.prototype.getOptionXCase = function() {
  return /** @type {proto.ServerMessage.EntityData.OptionXCase} */(jspb.Message.computeOneofCase(this, proto.ServerMessage.EntityData.oneofGroups_[0]));
};

/**
 * @enum {number}
 */
proto.ServerMessage.EntityData.OptionYCase = {
  OPTION_Y_NOT_SET: 0,
  Y: 3
};

/**
 * @return {proto.ServerMessage.EntityData.OptionYCase}
 */
proto.ServerMessage.EntityData.prototype.getOptionYCase = function() {
  return /** @type {proto.ServerMessage.EntityData.OptionYCase} */(jspb.Message.computeOneofCase(this, proto.ServerMessage.EntityData.oneofGroups_[1]));
};

/**
 * @enum {number}
 */
proto.ServerMessage.EntityData.OptionRotationCase = {
  OPTION_ROTATION_NOT_SET: 0,
  ROTATION: 4
};

/**
 * @return {proto.ServerMessage.EntityData.OptionRotationCase}
 */
proto.ServerMessage.EntityData.prototype.getOptionRotationCase = function() {
  return /** @type {proto.ServerMessage.EntityData.OptionRotationCase} */(jspb.Message.computeOneofCase(this, proto.ServerMessage.EntityData.oneofGroups_[2]));
};

/**
 * @enum {number}
 */
proto.ServerMessage.EntityData.OptionHealthCase = {
  OPTION_HEALTH_NOT_SET: 0,
  HEALTH: 5
};

/**
 * @return {proto.ServerMessage.EntityData.OptionHealthCase}
 */
proto.ServerMessage.EntityData.prototype.getOptionHealthCase = function() {
  return /** @type {proto.ServerMessage.EntityData.OptionHealthCase} */(jspb.Message.computeOneofCase(this, proto.ServerMessage.EntityData.oneofGroups_[3]));
};

/**
 * @enum {number}
 */
proto.ServerMessage.EntityData.OptionEnergyCase = {
  OPTION_ENERGY_NOT_SET: 0,
  ENERGY: 6
};

/**
 * @return {proto.ServerMessage.EntityData.OptionEnergyCase}
 */
proto.ServerMessage.EntityData.prototype.getOptionEnergyCase = function() {
  return /** @type {proto.ServerMessage.EntityData.OptionEnergyCase} */(jspb.Message.computeOneofCase(this, proto.ServerMessage.EntityData.oneofGroups_[4]));
};

/**
 * @enum {number}
 */
proto.ServerMessage.EntityData.OptionEntityTypeDataCase = {
  OPTION_ENTITY_TYPE_DATA_NOT_SET: 0,
  ENTITYTYPEDATA: 7
};

/**
 * @return {proto.ServerMessage.EntityData.OptionEntityTypeDataCase}
 */
proto.ServerMessage.EntityData.prototype.getOptionEntityTypeDataCase = function() {
  return /** @type {proto.ServerMessage.EntityData.OptionEntityTypeDataCase} */(jspb.Message.computeOneofCase(this, proto.ServerMessage.EntityData.oneofGroups_[5]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ServerMessage.EntityData.prototype.toObject = function(opt_includeInstance) {
  return proto.ServerMessage.EntityData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ServerMessage.EntityData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerMessage.EntityData.toObject = function(includeInstance, msg) {
  var f, obj = {
    replicationid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    x: jspb.Message.getFieldWithDefault(msg, 2, 0),
    y: jspb.Message.getFieldWithDefault(msg, 3, 0),
    rotation: jspb.Message.getFieldWithDefault(msg, 4, 0),
    health: jspb.Message.getFieldWithDefault(msg, 5, 0),
    energy: jspb.Message.getFieldWithDefault(msg, 6, 0),
    entitytypedata: (f = msg.getEntitytypedata()) && proto.ServerMessage.EntityTypeData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ServerMessage.EntityData}
 */
proto.ServerMessage.EntityData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ServerMessage.EntityData;
  return proto.ServerMessage.EntityData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ServerMessage.EntityData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ServerMessage.EntityData}
 */
proto.ServerMessage.EntityData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setReplicationid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setY(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setRotation(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHealth(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEnergy(value);
      break;
    case 7:
      var value = new proto.ServerMessage.EntityTypeData;
      reader.readMessage(value,proto.ServerMessage.EntityTypeData.deserializeBinaryFromReader);
      msg.setEntitytypedata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ServerMessage.EntityData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ServerMessage.EntityData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ServerMessage.EntityData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerMessage.EntityData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReplicationid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeSint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeSint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeSint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getEntitytypedata();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.ServerMessage.EntityTypeData.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 replicationId = 1;
 * @return {number}
 */
proto.ServerMessage.EntityData.prototype.getReplicationid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ServerMessage.EntityData} returns this
 */
proto.ServerMessage.EntityData.prototype.setReplicationid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional sint32 x = 2;
 * @return {number}
 */
proto.ServerMessage.EntityData.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ServerMessage.EntityData} returns this
 */
proto.ServerMessage.EntityData.prototype.setX = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.ServerMessage.EntityData.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ServerMessage.EntityData} returns this
 */
proto.ServerMessage.EntityData.prototype.clearX = function() {
  return jspb.Message.setOneofField(this, 2, proto.ServerMessage.EntityData.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ServerMessage.EntityData.prototype.hasX = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional sint32 y = 3;
 * @return {number}
 */
proto.ServerMessage.EntityData.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ServerMessage.EntityData} returns this
 */
proto.ServerMessage.EntityData.prototype.setY = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.ServerMessage.EntityData.oneofGroups_[1], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ServerMessage.EntityData} returns this
 */
proto.ServerMessage.EntityData.prototype.clearY = function() {
  return jspb.Message.setOneofField(this, 3, proto.ServerMessage.EntityData.oneofGroups_[1], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ServerMessage.EntityData.prototype.hasY = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional sint32 rotation = 4;
 * @return {number}
 */
proto.ServerMessage.EntityData.prototype.getRotation = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ServerMessage.EntityData} returns this
 */
proto.ServerMessage.EntityData.prototype.setRotation = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.ServerMessage.EntityData.oneofGroups_[2], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ServerMessage.EntityData} returns this
 */
proto.ServerMessage.EntityData.prototype.clearRotation = function() {
  return jspb.Message.setOneofField(this, 4, proto.ServerMessage.EntityData.oneofGroups_[2], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ServerMessage.EntityData.prototype.hasRotation = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 health = 5;
 * @return {number}
 */
proto.ServerMessage.EntityData.prototype.getHealth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ServerMessage.EntityData} returns this
 */
proto.ServerMessage.EntityData.prototype.setHealth = function(value) {
  return jspb.Message.setOneofField(this, 5, proto.ServerMessage.EntityData.oneofGroups_[3], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ServerMessage.EntityData} returns this
 */
proto.ServerMessage.EntityData.prototype.clearHealth = function() {
  return jspb.Message.setOneofField(this, 5, proto.ServerMessage.EntityData.oneofGroups_[3], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ServerMessage.EntityData.prototype.hasHealth = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 energy = 6;
 * @return {number}
 */
proto.ServerMessage.EntityData.prototype.getEnergy = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.ServerMessage.EntityData} returns this
 */
proto.ServerMessage.EntityData.prototype.setEnergy = function(value) {
  return jspb.Message.setOneofField(this, 6, proto.ServerMessage.EntityData.oneofGroups_[4], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ServerMessage.EntityData} returns this
 */
proto.ServerMessage.EntityData.prototype.clearEnergy = function() {
  return jspb.Message.setOneofField(this, 6, proto.ServerMessage.EntityData.oneofGroups_[4], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ServerMessage.EntityData.prototype.hasEnergy = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional EntityTypeData entityTypeData = 7;
 * @return {?proto.ServerMessage.EntityTypeData}
 */
proto.ServerMessage.EntityData.prototype.getEntitytypedata = function() {
  return /** @type{?proto.ServerMessage.EntityTypeData} */ (
    jspb.Message.getWrapperField(this, proto.ServerMessage.EntityTypeData, 7));
};


/**
 * @param {?proto.ServerMessage.EntityTypeData|undefined} value
 * @return {!proto.ServerMessage.EntityData} returns this
*/
proto.ServerMessage.EntityData.prototype.setEntitytypedata = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.ServerMessage.EntityData.oneofGroups_[5], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ServerMessage.EntityData} returns this
 */
proto.ServerMessage.EntityData.prototype.clearEntitytypedata = function() {
  return this.setEntitytypedata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ServerMessage.EntityData.prototype.hasEntitytypedata = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ServerMessage.EntityTypeData.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.ServerMessage.EntityTypeData.EntitydataCase = {
  ENTITYDATA_NOT_SET: 0,
  CHARACTERDATA: 1,
  MINIONDATA: 2,
  TOWERDATA: 3,
  COREDATA: 4
};

/**
 * @return {proto.ServerMessage.EntityTypeData.EntitydataCase}
 */
proto.ServerMessage.EntityTypeData.prototype.getEntitydataCase = function() {
  return /** @type {proto.ServerMessage.EntityTypeData.EntitydataCase} */(jspb.Message.computeOneofCase(this, proto.ServerMessage.EntityTypeData.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ServerMessage.EntityTypeData.prototype.toObject = function(opt_includeInstance) {
  return proto.ServerMessage.EntityTypeData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ServerMessage.EntityTypeData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerMessage.EntityTypeData.toObject = function(includeInstance, msg) {
  var f, obj = {
    characterdata: (f = msg.getCharacterdata()) && proto.ServerMessage.EntityTypeData.CharacterData.toObject(includeInstance, f),
    miniondata: (f = msg.getMiniondata()) && proto.ServerMessage.EntityTypeData.MinionData.toObject(includeInstance, f),
    towerdata: (f = msg.getTowerdata()) && proto.ServerMessage.EntityTypeData.TowerData.toObject(includeInstance, f),
    coredata: (f = msg.getCoredata()) && proto.ServerMessage.EntityTypeData.CoreData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ServerMessage.EntityTypeData}
 */
proto.ServerMessage.EntityTypeData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ServerMessage.EntityTypeData;
  return proto.ServerMessage.EntityTypeData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ServerMessage.EntityTypeData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ServerMessage.EntityTypeData}
 */
proto.ServerMessage.EntityTypeData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ServerMessage.EntityTypeData.CharacterData;
      reader.readMessage(value,proto.ServerMessage.EntityTypeData.CharacterData.deserializeBinaryFromReader);
      msg.setCharacterdata(value);
      break;
    case 2:
      var value = new proto.ServerMessage.EntityTypeData.MinionData;
      reader.readMessage(value,proto.ServerMessage.EntityTypeData.MinionData.deserializeBinaryFromReader);
      msg.setMiniondata(value);
      break;
    case 3:
      var value = new proto.ServerMessage.EntityTypeData.TowerData;
      reader.readMessage(value,proto.ServerMessage.EntityTypeData.TowerData.deserializeBinaryFromReader);
      msg.setTowerdata(value);
      break;
    case 4:
      var value = new proto.ServerMessage.EntityTypeData.CoreData;
      reader.readMessage(value,proto.ServerMessage.EntityTypeData.CoreData.deserializeBinaryFromReader);
      msg.setCoredata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ServerMessage.EntityTypeData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ServerMessage.EntityTypeData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ServerMessage.EntityTypeData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerMessage.EntityTypeData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCharacterdata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ServerMessage.EntityTypeData.CharacterData.serializeBinaryToWriter
    );
  }
  f = message.getMiniondata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ServerMessage.EntityTypeData.MinionData.serializeBinaryToWriter
    );
  }
  f = message.getTowerdata();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ServerMessage.EntityTypeData.TowerData.serializeBinaryToWriter
    );
  }
  f = message.getCoredata();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ServerMessage.EntityTypeData.CoreData.serializeBinaryToWriter
    );
  }
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ServerMessage.EntityTypeData.CharacterData.oneofGroups_ = [[1],[2],[3]];

/**
 * @enum {number}
 */
proto.ServerMessage.EntityTypeData.CharacterData.OptionMaxHealthCase = {
  OPTION_MAX_HEALTH_NOT_SET: 0,
  MAXHEALTH: 1
};

/**
 * @return {proto.ServerMessage.EntityTypeData.CharacterData.OptionMaxHealthCase}
 */
proto.ServerMessage.EntityTypeData.CharacterData.prototype.getOptionMaxHealthCase = function() {
  return /** @type {proto.ServerMessage.EntityTypeData.CharacterData.OptionMaxHealthCase} */(jspb.Message.computeOneofCase(this, proto.ServerMessage.EntityTypeData.CharacterData.oneofGroups_[0]));
};

/**
 * @enum {number}
 */
proto.ServerMessage.EntityTypeData.CharacterData.OptionMaxEnergyCase = {
  OPTION_MAX_ENERGY_NOT_SET: 0,
  MAXENERGY: 2
};

/**
 * @return {proto.ServerMessage.EntityTypeData.CharacterData.OptionMaxEnergyCase}
 */
proto.ServerMessage.EntityTypeData.CharacterData.prototype.getOptionMaxEnergyCase = function() {
  return /** @type {proto.ServerMessage.EntityTypeData.CharacterData.OptionMaxEnergyCase} */(jspb.Message.computeOneofCase(this, proto.ServerMessage.EntityTypeData.CharacterData.oneofGroups_[1]));
};

/**
 * @enum {number}
 */
proto.ServerMessage.EntityTypeData.CharacterData.OptionEnergyTypeCase = {
  OPTION_ENERGY_TYPE_NOT_SET: 0,
  ENERGYTYPE: 3
};

/**
 * @return {proto.ServerMessage.EntityTypeData.CharacterData.OptionEnergyTypeCase}
 */
proto.ServerMessage.EntityTypeData.CharacterData.prototype.getOptionEnergyTypeCase = function() {
  return /** @type {proto.ServerMessage.EntityTypeData.CharacterData.OptionEnergyTypeCase} */(jspb.Message.computeOneofCase(this, proto.ServerMessage.EntityTypeData.CharacterData.oneofGroups_[2]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ServerMessage.EntityTypeData.CharacterData.prototype.toObject = function(opt_includeInstance) {
  return proto.ServerMessage.EntityTypeData.CharacterData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ServerMessage.EntityTypeData.CharacterData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerMessage.EntityTypeData.CharacterData.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxhealth: jspb.Message.getFieldWithDefault(msg, 1, 0),
    maxenergy: jspb.Message.getFieldWithDefault(msg, 2, 0),
    energytype: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ServerMessage.EntityTypeData.CharacterData}
 */
proto.ServerMessage.EntityTypeData.CharacterData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ServerMessage.EntityTypeData.CharacterData;
  return proto.ServerMessage.EntityTypeData.CharacterData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ServerMessage.EntityTypeData.CharacterData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ServerMessage.EntityTypeData.CharacterData}
 */
proto.ServerMessage.EntityTypeData.CharacterData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxhealth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxenergy(value);
      break;
    case 3:
      var value = /** @type {!proto.ServerMessage.EntityTypeData.CharacterData.EnergyType} */ (reader.readEnum());
      msg.setEnergytype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ServerMessage.EntityTypeData.CharacterData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ServerMessage.EntityTypeData.CharacterData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ServerMessage.EntityTypeData.CharacterData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerMessage.EntityTypeData.CharacterData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {!proto.ServerMessage.EntityTypeData.CharacterData.EnergyType} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.ServerMessage.EntityTypeData.CharacterData.EnergyType = {
  NONE: 0,
  MANA: 1,
  ENERGY: 2
};

/**
 * optional uint32 maxHealth = 1;
 * @return {number}
 */
proto.ServerMessage.EntityTypeData.CharacterData.prototype.getMaxhealth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ServerMessage.EntityTypeData.CharacterData} returns this
 */
proto.ServerMessage.EntityTypeData.CharacterData.prototype.setMaxhealth = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.ServerMessage.EntityTypeData.CharacterData.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ServerMessage.EntityTypeData.CharacterData} returns this
 */
proto.ServerMessage.EntityTypeData.CharacterData.prototype.clearMaxhealth = function() {
  return jspb.Message.setOneofField(this, 1, proto.ServerMessage.EntityTypeData.CharacterData.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ServerMessage.EntityTypeData.CharacterData.prototype.hasMaxhealth = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 maxEnergy = 2;
 * @return {number}
 */
proto.ServerMessage.EntityTypeData.CharacterData.prototype.getMaxenergy = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ServerMessage.EntityTypeData.CharacterData} returns this
 */
proto.ServerMessage.EntityTypeData.CharacterData.prototype.setMaxenergy = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.ServerMessage.EntityTypeData.CharacterData.oneofGroups_[1], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ServerMessage.EntityTypeData.CharacterData} returns this
 */
proto.ServerMessage.EntityTypeData.CharacterData.prototype.clearMaxenergy = function() {
  return jspb.Message.setOneofField(this, 2, proto.ServerMessage.EntityTypeData.CharacterData.oneofGroups_[1], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ServerMessage.EntityTypeData.CharacterData.prototype.hasMaxenergy = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional EnergyType energyType = 3;
 * @return {!proto.ServerMessage.EntityTypeData.CharacterData.EnergyType}
 */
proto.ServerMessage.EntityTypeData.CharacterData.prototype.getEnergytype = function() {
  return /** @type {!proto.ServerMessage.EntityTypeData.CharacterData.EnergyType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.ServerMessage.EntityTypeData.CharacterData.EnergyType} value
 * @return {!proto.ServerMessage.EntityTypeData.CharacterData} returns this
 */
proto.ServerMessage.EntityTypeData.CharacterData.prototype.setEnergytype = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.ServerMessage.EntityTypeData.CharacterData.oneofGroups_[2], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ServerMessage.EntityTypeData.CharacterData} returns this
 */
proto.ServerMessage.EntityTypeData.CharacterData.prototype.clearEnergytype = function() {
  return jspb.Message.setOneofField(this, 3, proto.ServerMessage.EntityTypeData.CharacterData.oneofGroups_[2], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ServerMessage.EntityTypeData.CharacterData.prototype.hasEnergytype = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ServerMessage.EntityTypeData.MinionData.prototype.toObject = function(opt_includeInstance) {
  return proto.ServerMessage.EntityTypeData.MinionData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ServerMessage.EntityTypeData.MinionData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerMessage.EntityTypeData.MinionData.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ServerMessage.EntityTypeData.MinionData}
 */
proto.ServerMessage.EntityTypeData.MinionData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ServerMessage.EntityTypeData.MinionData;
  return proto.ServerMessage.EntityTypeData.MinionData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ServerMessage.EntityTypeData.MinionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ServerMessage.EntityTypeData.MinionData}
 */
proto.ServerMessage.EntityTypeData.MinionData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ServerMessage.EntityTypeData.MinionData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ServerMessage.EntityTypeData.MinionData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ServerMessage.EntityTypeData.MinionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerMessage.EntityTypeData.MinionData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ServerMessage.EntityTypeData.TowerData.prototype.toObject = function(opt_includeInstance) {
  return proto.ServerMessage.EntityTypeData.TowerData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ServerMessage.EntityTypeData.TowerData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerMessage.EntityTypeData.TowerData.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ServerMessage.EntityTypeData.TowerData}
 */
proto.ServerMessage.EntityTypeData.TowerData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ServerMessage.EntityTypeData.TowerData;
  return proto.ServerMessage.EntityTypeData.TowerData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ServerMessage.EntityTypeData.TowerData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ServerMessage.EntityTypeData.TowerData}
 */
proto.ServerMessage.EntityTypeData.TowerData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ServerMessage.EntityTypeData.TowerData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ServerMessage.EntityTypeData.TowerData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ServerMessage.EntityTypeData.TowerData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerMessage.EntityTypeData.TowerData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ServerMessage.EntityTypeData.CoreData.prototype.toObject = function(opt_includeInstance) {
  return proto.ServerMessage.EntityTypeData.CoreData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ServerMessage.EntityTypeData.CoreData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerMessage.EntityTypeData.CoreData.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ServerMessage.EntityTypeData.CoreData}
 */
proto.ServerMessage.EntityTypeData.CoreData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ServerMessage.EntityTypeData.CoreData;
  return proto.ServerMessage.EntityTypeData.CoreData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ServerMessage.EntityTypeData.CoreData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ServerMessage.EntityTypeData.CoreData}
 */
proto.ServerMessage.EntityTypeData.CoreData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ServerMessage.EntityTypeData.CoreData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ServerMessage.EntityTypeData.CoreData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ServerMessage.EntityTypeData.CoreData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerMessage.EntityTypeData.CoreData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * optional CharacterData characterData = 1;
 * @return {?proto.ServerMessage.EntityTypeData.CharacterData}
 */
proto.ServerMessage.EntityTypeData.prototype.getCharacterdata = function() {
  return /** @type{?proto.ServerMessage.EntityTypeData.CharacterData} */ (
    jspb.Message.getWrapperField(this, proto.ServerMessage.EntityTypeData.CharacterData, 1));
};


/**
 * @param {?proto.ServerMessage.EntityTypeData.CharacterData|undefined} value
 * @return {!proto.ServerMessage.EntityTypeData} returns this
*/
proto.ServerMessage.EntityTypeData.prototype.setCharacterdata = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.ServerMessage.EntityTypeData.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ServerMessage.EntityTypeData} returns this
 */
proto.ServerMessage.EntityTypeData.prototype.clearCharacterdata = function() {
  return this.setCharacterdata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ServerMessage.EntityTypeData.prototype.hasCharacterdata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MinionData minionData = 2;
 * @return {?proto.ServerMessage.EntityTypeData.MinionData}
 */
proto.ServerMessage.EntityTypeData.prototype.getMiniondata = function() {
  return /** @type{?proto.ServerMessage.EntityTypeData.MinionData} */ (
    jspb.Message.getWrapperField(this, proto.ServerMessage.EntityTypeData.MinionData, 2));
};


/**
 * @param {?proto.ServerMessage.EntityTypeData.MinionData|undefined} value
 * @return {!proto.ServerMessage.EntityTypeData} returns this
*/
proto.ServerMessage.EntityTypeData.prototype.setMiniondata = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.ServerMessage.EntityTypeData.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ServerMessage.EntityTypeData} returns this
 */
proto.ServerMessage.EntityTypeData.prototype.clearMiniondata = function() {
  return this.setMiniondata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ServerMessage.EntityTypeData.prototype.hasMiniondata = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TowerData towerData = 3;
 * @return {?proto.ServerMessage.EntityTypeData.TowerData}
 */
proto.ServerMessage.EntityTypeData.prototype.getTowerdata = function() {
  return /** @type{?proto.ServerMessage.EntityTypeData.TowerData} */ (
    jspb.Message.getWrapperField(this, proto.ServerMessage.EntityTypeData.TowerData, 3));
};


/**
 * @param {?proto.ServerMessage.EntityTypeData.TowerData|undefined} value
 * @return {!proto.ServerMessage.EntityTypeData} returns this
*/
proto.ServerMessage.EntityTypeData.prototype.setTowerdata = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.ServerMessage.EntityTypeData.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ServerMessage.EntityTypeData} returns this
 */
proto.ServerMessage.EntityTypeData.prototype.clearTowerdata = function() {
  return this.setTowerdata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ServerMessage.EntityTypeData.prototype.hasTowerdata = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional CoreData coreData = 4;
 * @return {?proto.ServerMessage.EntityTypeData.CoreData}
 */
proto.ServerMessage.EntityTypeData.prototype.getCoredata = function() {
  return /** @type{?proto.ServerMessage.EntityTypeData.CoreData} */ (
    jspb.Message.getWrapperField(this, proto.ServerMessage.EntityTypeData.CoreData, 4));
};


/**
 * @param {?proto.ServerMessage.EntityTypeData.CoreData|undefined} value
 * @return {!proto.ServerMessage.EntityTypeData} returns this
*/
proto.ServerMessage.EntityTypeData.prototype.setCoredata = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.ServerMessage.EntityTypeData.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ServerMessage.EntityTypeData} returns this
 */
proto.ServerMessage.EntityTypeData.prototype.clearCoredata = function() {
  return this.setCoredata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ServerMessage.EntityTypeData.prototype.hasCoredata = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional UpdateTick updateTick = 1;
 * @return {?proto.ServerMessage.UpdateTick}
 */
proto.ServerMessage.prototype.getUpdatetick = function() {
  return /** @type{?proto.ServerMessage.UpdateTick} */ (
    jspb.Message.getWrapperField(this, proto.ServerMessage.UpdateTick, 1));
};


/**
 * @param {?proto.ServerMessage.UpdateTick|undefined} value
 * @return {!proto.ServerMessage} returns this
*/
proto.ServerMessage.prototype.setUpdatetick = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.ServerMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ServerMessage} returns this
 */
proto.ServerMessage.prototype.clearUpdatetick = function() {
  return this.setUpdatetick(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ServerMessage.prototype.hasUpdatetick = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Snapshot snapshot = 2;
 * @return {?proto.ServerMessage.Snapshot}
 */
proto.ServerMessage.prototype.getSnapshot = function() {
  return /** @type{?proto.ServerMessage.Snapshot} */ (
    jspb.Message.getWrapperField(this, proto.ServerMessage.Snapshot, 2));
};


/**
 * @param {?proto.ServerMessage.Snapshot|undefined} value
 * @return {!proto.ServerMessage} returns this
*/
proto.ServerMessage.prototype.setSnapshot = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.ServerMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ServerMessage} returns this
 */
proto.ServerMessage.prototype.clearSnapshot = function() {
  return this.setSnapshot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ServerMessage.prototype.hasSnapshot = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional EntityDestroyed entityDestroyed = 5;
 * @return {?proto.ServerMessage.EntityDestroyed}
 */
proto.ServerMessage.prototype.getEntitydestroyed = function() {
  return /** @type{?proto.ServerMessage.EntityDestroyed} */ (
    jspb.Message.getWrapperField(this, proto.ServerMessage.EntityDestroyed, 5));
};


/**
 * @param {?proto.ServerMessage.EntityDestroyed|undefined} value
 * @return {!proto.ServerMessage} returns this
*/
proto.ServerMessage.prototype.setEntitydestroyed = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.ServerMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ServerMessage} returns this
 */
proto.ServerMessage.prototype.clearEntitydestroyed = function() {
  return this.setEntitydestroyed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ServerMessage.prototype.hasEntitydestroyed = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional VerifyUuid verifyUuid = 25;
 * @return {?proto.ServerMessage.VerifyUuid}
 */
proto.ServerMessage.prototype.getVerifyuuid = function() {
  return /** @type{?proto.ServerMessage.VerifyUuid} */ (
    jspb.Message.getWrapperField(this, proto.ServerMessage.VerifyUuid, 25));
};


/**
 * @param {?proto.ServerMessage.VerifyUuid|undefined} value
 * @return {!proto.ServerMessage} returns this
*/
proto.ServerMessage.prototype.setVerifyuuid = function(value) {
  return jspb.Message.setOneofWrapperField(this, 25, proto.ServerMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ServerMessage} returns this
 */
proto.ServerMessage.prototype.clearVerifyuuid = function() {
  return this.setVerifyuuid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ServerMessage.prototype.hasVerifyuuid = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional VerifiedUuid verifiedUuid = 26;
 * @return {?proto.ServerMessage.VerifiedUuid}
 */
proto.ServerMessage.prototype.getVerifieduuid = function() {
  return /** @type{?proto.ServerMessage.VerifiedUuid} */ (
    jspb.Message.getWrapperField(this, proto.ServerMessage.VerifiedUuid, 26));
};


/**
 * @param {?proto.ServerMessage.VerifiedUuid|undefined} value
 * @return {!proto.ServerMessage} returns this
*/
proto.ServerMessage.prototype.setVerifieduuid = function(value) {
  return jspb.Message.setOneofWrapperField(this, 26, proto.ServerMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ServerMessage} returns this
 */
proto.ServerMessage.prototype.clearVerifieduuid = function() {
  return this.setVerifieduuid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ServerMessage.prototype.hasVerifieduuid = function() {
  return jspb.Message.getField(this, 26) != null;
};


goog.object.extend(exports, proto);

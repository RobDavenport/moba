// source: ClientMessage.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Ability', null, global);
goog.exportSymbol('proto.Ability.AbilityDataType', null, global);
goog.exportSymbol('proto.Ability.AbilitydataCase', null, global);
goog.exportSymbol('proto.Ability.AimedAbilityData', null, global);
goog.exportSymbol('proto.Ability.TargetedAbilityData', null, global);
goog.exportSymbol('proto.ClientMessage', null, global);
goog.exportSymbol('proto.ClientMessage.Ack', null, global);
goog.exportSymbol('proto.ClientMessage.MsgdataCase', null, global);
goog.exportSymbol('proto.ClientMessage.VerifyRtc', null, global);
goog.exportSymbol('proto.Command', null, global);
goog.exportSymbol('proto.Command.Attack', null, global);
goog.exportSymbol('proto.Command.CommandCase', null, global);
goog.exportSymbol('proto.Command.MoveCommand', null, global);
goog.exportSymbol('proto.Command.MoveDelta', null, global);
goog.exportSymbol('proto.Command.Recall', null, global);
goog.exportSymbol('proto.Command.Stop', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ClientMessage.oneofGroups_);
};
goog.inherits(proto.ClientMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ClientMessage.displayName = 'proto.ClientMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientMessage.Ack = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ClientMessage.Ack, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ClientMessage.Ack.displayName = 'proto.ClientMessage.Ack';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientMessage.VerifyRtc = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ClientMessage.VerifyRtc, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ClientMessage.VerifyRtc.displayName = 'proto.ClientMessage.VerifyRtc';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Command = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Command.oneofGroups_);
};
goog.inherits(proto.Command, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Command.displayName = 'proto.Command';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Command.MoveCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Command.MoveCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Command.MoveCommand.displayName = 'proto.Command.MoveCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Command.MoveDelta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Command.MoveDelta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Command.MoveDelta.displayName = 'proto.Command.MoveDelta';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Command.Attack = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Command.Attack, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Command.Attack.displayName = 'proto.Command.Attack';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Command.Stop = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Command.Stop, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Command.Stop.displayName = 'proto.Command.Stop';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Command.Recall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Command.Recall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Command.Recall.displayName = 'proto.Command.Recall';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Ability = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Ability.oneofGroups_);
};
goog.inherits(proto.Ability, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Ability.displayName = 'proto.Ability';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Ability.TargetedAbilityData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Ability.TargetedAbilityData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Ability.TargetedAbilityData.displayName = 'proto.Ability.TargetedAbilityData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Ability.AimedAbilityData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Ability.AimedAbilityData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Ability.AimedAbilityData.displayName = 'proto.Ability.AimedAbilityData';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ClientMessage.oneofGroups_ = [[1,2,100]];

/**
 * @enum {number}
 */
proto.ClientMessage.MsgdataCase = {
  MSGDATA_NOT_SET: 0,
  ACK: 1,
  COMMAND: 2,
  VERYFIYRTC: 100
};

/**
 * @return {proto.ClientMessage.MsgdataCase}
 */
proto.ClientMessage.prototype.getMsgdataCase = function() {
  return /** @type {proto.ClientMessage.MsgdataCase} */(jspb.Message.computeOneofCase(this, proto.ClientMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ClientMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.ClientMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ClientMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    ack: (f = msg.getAck()) && proto.ClientMessage.Ack.toObject(includeInstance, f),
    command: (f = msg.getCommand()) && proto.Command.toObject(includeInstance, f),
    veryfiyrtc: (f = msg.getVeryfiyrtc()) && proto.ClientMessage.VerifyRtc.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientMessage}
 */
proto.ClientMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ClientMessage;
  return proto.ClientMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientMessage}
 */
proto.ClientMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ClientMessage.Ack;
      reader.readMessage(value,proto.ClientMessage.Ack.deserializeBinaryFromReader);
      msg.setAck(value);
      break;
    case 2:
      var value = new proto.Command;
      reader.readMessage(value,proto.Command.deserializeBinaryFromReader);
      msg.setCommand(value);
      break;
    case 100:
      var value = new proto.ClientMessage.VerifyRtc;
      reader.readMessage(value,proto.ClientMessage.VerifyRtc.deserializeBinaryFromReader);
      msg.setVeryfiyrtc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ClientMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAck();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ClientMessage.Ack.serializeBinaryToWriter
    );
  }
  f = message.getCommand();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Command.serializeBinaryToWriter
    );
  }
  f = message.getVeryfiyrtc();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto.ClientMessage.VerifyRtc.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ClientMessage.Ack.prototype.toObject = function(opt_includeInstance) {
  return proto.ClientMessage.Ack.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ClientMessage.Ack} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientMessage.Ack.toObject = function(includeInstance, msg) {
  var f, obj = {
    newbaseline: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientMessage.Ack}
 */
proto.ClientMessage.Ack.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ClientMessage.Ack;
  return proto.ClientMessage.Ack.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientMessage.Ack} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientMessage.Ack}
 */
proto.ClientMessage.Ack.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNewbaseline(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientMessage.Ack.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ClientMessage.Ack.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientMessage.Ack} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientMessage.Ack.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNewbaseline();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 newBaseline = 1;
 * @return {number}
 */
proto.ClientMessage.Ack.prototype.getNewbaseline = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ClientMessage.Ack} returns this
 */
proto.ClientMessage.Ack.prototype.setNewbaseline = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ClientMessage.VerifyRtc.prototype.toObject = function(opt_includeInstance) {
  return proto.ClientMessage.VerifyRtc.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ClientMessage.VerifyRtc} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientMessage.VerifyRtc.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientMessage.VerifyRtc}
 */
proto.ClientMessage.VerifyRtc.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ClientMessage.VerifyRtc;
  return proto.ClientMessage.VerifyRtc.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientMessage.VerifyRtc} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientMessage.VerifyRtc}
 */
proto.ClientMessage.VerifyRtc.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientMessage.VerifyRtc.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ClientMessage.VerifyRtc.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientMessage.VerifyRtc} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientMessage.VerifyRtc.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.ClientMessage.VerifyRtc.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ClientMessage.VerifyRtc} returns this
 */
proto.ClientMessage.VerifyRtc.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Ack ack = 1;
 * @return {?proto.ClientMessage.Ack}
 */
proto.ClientMessage.prototype.getAck = function() {
  return /** @type{?proto.ClientMessage.Ack} */ (
    jspb.Message.getWrapperField(this, proto.ClientMessage.Ack, 1));
};


/**
 * @param {?proto.ClientMessage.Ack|undefined} value
 * @return {!proto.ClientMessage} returns this
*/
proto.ClientMessage.prototype.setAck = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.ClientMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ClientMessage} returns this
 */
proto.ClientMessage.prototype.clearAck = function() {
  return this.setAck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ClientMessage.prototype.hasAck = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Command command = 2;
 * @return {?proto.Command}
 */
proto.ClientMessage.prototype.getCommand = function() {
  return /** @type{?proto.Command} */ (
    jspb.Message.getWrapperField(this, proto.Command, 2));
};


/**
 * @param {?proto.Command|undefined} value
 * @return {!proto.ClientMessage} returns this
*/
proto.ClientMessage.prototype.setCommand = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.ClientMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ClientMessage} returns this
 */
proto.ClientMessage.prototype.clearCommand = function() {
  return this.setCommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ClientMessage.prototype.hasCommand = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional VerifyRtc veryfiyRtc = 100;
 * @return {?proto.ClientMessage.VerifyRtc}
 */
proto.ClientMessage.prototype.getVeryfiyrtc = function() {
  return /** @type{?proto.ClientMessage.VerifyRtc} */ (
    jspb.Message.getWrapperField(this, proto.ClientMessage.VerifyRtc, 100));
};


/**
 * @param {?proto.ClientMessage.VerifyRtc|undefined} value
 * @return {!proto.ClientMessage} returns this
*/
proto.ClientMessage.prototype.setVeryfiyrtc = function(value) {
  return jspb.Message.setOneofWrapperField(this, 100, proto.ClientMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ClientMessage} returns this
 */
proto.ClientMessage.prototype.clearVeryfiyrtc = function() {
  return this.setVeryfiyrtc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ClientMessage.prototype.hasVeryfiyrtc = function() {
  return jspb.Message.getField(this, 100) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Command.oneofGroups_ = [[1,2,3,4,5,6]];

/**
 * @enum {number}
 */
proto.Command.CommandCase = {
  COMMAND_NOT_SET: 0,
  MOVECOMMAND: 1,
  MOVEDELTA: 2,
  ATTACK: 3,
  ABILITY: 4,
  STOP: 5,
  RECALL: 6
};

/**
 * @return {proto.Command.CommandCase}
 */
proto.Command.prototype.getCommandCase = function() {
  return /** @type {proto.Command.CommandCase} */(jspb.Message.computeOneofCase(this, proto.Command.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Command.prototype.toObject = function(opt_includeInstance) {
  return proto.Command.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Command} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Command.toObject = function(includeInstance, msg) {
  var f, obj = {
    movecommand: (f = msg.getMovecommand()) && proto.Command.MoveCommand.toObject(includeInstance, f),
    movedelta: (f = msg.getMovedelta()) && proto.Command.MoveDelta.toObject(includeInstance, f),
    attack: (f = msg.getAttack()) && proto.Command.Attack.toObject(includeInstance, f),
    ability: (f = msg.getAbility()) && proto.Ability.toObject(includeInstance, f),
    stop: (f = msg.getStop()) && proto.Command.Stop.toObject(includeInstance, f),
    recall: (f = msg.getRecall()) && proto.Command.Recall.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Command}
 */
proto.Command.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Command;
  return proto.Command.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Command} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Command}
 */
proto.Command.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Command.MoveCommand;
      reader.readMessage(value,proto.Command.MoveCommand.deserializeBinaryFromReader);
      msg.setMovecommand(value);
      break;
    case 2:
      var value = new proto.Command.MoveDelta;
      reader.readMessage(value,proto.Command.MoveDelta.deserializeBinaryFromReader);
      msg.setMovedelta(value);
      break;
    case 3:
      var value = new proto.Command.Attack;
      reader.readMessage(value,proto.Command.Attack.deserializeBinaryFromReader);
      msg.setAttack(value);
      break;
    case 4:
      var value = new proto.Ability;
      reader.readMessage(value,proto.Ability.deserializeBinaryFromReader);
      msg.setAbility(value);
      break;
    case 5:
      var value = new proto.Command.Stop;
      reader.readMessage(value,proto.Command.Stop.deserializeBinaryFromReader);
      msg.setStop(value);
      break;
    case 6:
      var value = new proto.Command.Recall;
      reader.readMessage(value,proto.Command.Recall.deserializeBinaryFromReader);
      msg.setRecall(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Command.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Command.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Command} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Command.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMovecommand();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Command.MoveCommand.serializeBinaryToWriter
    );
  }
  f = message.getMovedelta();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Command.MoveDelta.serializeBinaryToWriter
    );
  }
  f = message.getAttack();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Command.Attack.serializeBinaryToWriter
    );
  }
  f = message.getAbility();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Ability.serializeBinaryToWriter
    );
  }
  f = message.getStop();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Command.Stop.serializeBinaryToWriter
    );
  }
  f = message.getRecall();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.Command.Recall.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Command.MoveCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.Command.MoveCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Command.MoveCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Command.MoveCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    isattack: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Command.MoveCommand}
 */
proto.Command.MoveCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Command.MoveCommand;
  return proto.Command.MoveCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Command.MoveCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Command.MoveCommand}
 */
proto.Command.MoveCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsattack(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Command.MoveCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Command.MoveCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Command.MoveCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Command.MoveCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getIsattack();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional float x = 1;
 * @return {number}
 */
proto.Command.MoveCommand.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Command.MoveCommand} returns this
 */
proto.Command.MoveCommand.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.Command.MoveCommand.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Command.MoveCommand} returns this
 */
proto.Command.MoveCommand.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional bool isAttack = 3;
 * @return {boolean}
 */
proto.Command.MoveCommand.prototype.getIsattack = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Command.MoveCommand} returns this
 */
proto.Command.MoveCommand.prototype.setIsattack = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Command.MoveDelta.prototype.toObject = function(opt_includeInstance) {
  return proto.Command.MoveDelta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Command.MoveDelta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Command.MoveDelta.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Command.MoveDelta}
 */
proto.Command.MoveDelta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Command.MoveDelta;
  return proto.Command.MoveDelta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Command.MoveDelta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Command.MoveDelta}
 */
proto.Command.MoveDelta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Command.MoveDelta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Command.MoveDelta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Command.MoveDelta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Command.MoveDelta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float x = 1;
 * @return {number}
 */
proto.Command.MoveDelta.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Command.MoveDelta} returns this
 */
proto.Command.MoveDelta.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.Command.MoveDelta.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Command.MoveDelta} returns this
 */
proto.Command.MoveDelta.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Command.Attack.prototype.toObject = function(opt_includeInstance) {
  return proto.Command.Attack.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Command.Attack} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Command.Attack.toObject = function(includeInstance, msg) {
  var f, obj = {
    target: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Command.Attack}
 */
proto.Command.Attack.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Command.Attack;
  return proto.Command.Attack.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Command.Attack} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Command.Attack}
 */
proto.Command.Attack.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTarget(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Command.Attack.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Command.Attack.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Command.Attack} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Command.Attack.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTarget();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 target = 1;
 * @return {number}
 */
proto.Command.Attack.prototype.getTarget = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Command.Attack} returns this
 */
proto.Command.Attack.prototype.setTarget = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Command.Stop.prototype.toObject = function(opt_includeInstance) {
  return proto.Command.Stop.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Command.Stop} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Command.Stop.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Command.Stop}
 */
proto.Command.Stop.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Command.Stop;
  return proto.Command.Stop.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Command.Stop} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Command.Stop}
 */
proto.Command.Stop.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Command.Stop.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Command.Stop.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Command.Stop} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Command.Stop.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Command.Recall.prototype.toObject = function(opt_includeInstance) {
  return proto.Command.Recall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Command.Recall} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Command.Recall.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Command.Recall}
 */
proto.Command.Recall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Command.Recall;
  return proto.Command.Recall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Command.Recall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Command.Recall}
 */
proto.Command.Recall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Command.Recall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Command.Recall.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Command.Recall} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Command.Recall.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * optional MoveCommand moveCommand = 1;
 * @return {?proto.Command.MoveCommand}
 */
proto.Command.prototype.getMovecommand = function() {
  return /** @type{?proto.Command.MoveCommand} */ (
    jspb.Message.getWrapperField(this, proto.Command.MoveCommand, 1));
};


/**
 * @param {?proto.Command.MoveCommand|undefined} value
 * @return {!proto.Command} returns this
*/
proto.Command.prototype.setMovecommand = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Command} returns this
 */
proto.Command.prototype.clearMovecommand = function() {
  return this.setMovecommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Command.prototype.hasMovecommand = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MoveDelta moveDelta = 2;
 * @return {?proto.Command.MoveDelta}
 */
proto.Command.prototype.getMovedelta = function() {
  return /** @type{?proto.Command.MoveDelta} */ (
    jspb.Message.getWrapperField(this, proto.Command.MoveDelta, 2));
};


/**
 * @param {?proto.Command.MoveDelta|undefined} value
 * @return {!proto.Command} returns this
*/
proto.Command.prototype.setMovedelta = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Command} returns this
 */
proto.Command.prototype.clearMovedelta = function() {
  return this.setMovedelta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Command.prototype.hasMovedelta = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Attack attack = 3;
 * @return {?proto.Command.Attack}
 */
proto.Command.prototype.getAttack = function() {
  return /** @type{?proto.Command.Attack} */ (
    jspb.Message.getWrapperField(this, proto.Command.Attack, 3));
};


/**
 * @param {?proto.Command.Attack|undefined} value
 * @return {!proto.Command} returns this
*/
proto.Command.prototype.setAttack = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Command} returns this
 */
proto.Command.prototype.clearAttack = function() {
  return this.setAttack(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Command.prototype.hasAttack = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Ability ability = 4;
 * @return {?proto.Ability}
 */
proto.Command.prototype.getAbility = function() {
  return /** @type{?proto.Ability} */ (
    jspb.Message.getWrapperField(this, proto.Ability, 4));
};


/**
 * @param {?proto.Ability|undefined} value
 * @return {!proto.Command} returns this
*/
proto.Command.prototype.setAbility = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Command} returns this
 */
proto.Command.prototype.clearAbility = function() {
  return this.setAbility(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Command.prototype.hasAbility = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Stop stop = 5;
 * @return {?proto.Command.Stop}
 */
proto.Command.prototype.getStop = function() {
  return /** @type{?proto.Command.Stop} */ (
    jspb.Message.getWrapperField(this, proto.Command.Stop, 5));
};


/**
 * @param {?proto.Command.Stop|undefined} value
 * @return {!proto.Command} returns this
*/
proto.Command.prototype.setStop = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Command} returns this
 */
proto.Command.prototype.clearStop = function() {
  return this.setStop(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Command.prototype.hasStop = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Recall recall = 6;
 * @return {?proto.Command.Recall}
 */
proto.Command.prototype.getRecall = function() {
  return /** @type{?proto.Command.Recall} */ (
    jspb.Message.getWrapperField(this, proto.Command.Recall, 6));
};


/**
 * @param {?proto.Command.Recall|undefined} value
 * @return {!proto.Command} returns this
*/
proto.Command.prototype.setRecall = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.Command.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Command} returns this
 */
proto.Command.prototype.clearRecall = function() {
  return this.setRecall(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Command.prototype.hasRecall = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Ability.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.Ability.AbilitydataCase = {
  ABILITYDATA_NOT_SET: 0,
  TARGETEDABILITYDATA: 2,
  AIMEDABILITYDATA: 3
};

/**
 * @return {proto.Ability.AbilitydataCase}
 */
proto.Ability.prototype.getAbilitydataCase = function() {
  return /** @type {proto.Ability.AbilitydataCase} */(jspb.Message.computeOneofCase(this, proto.Ability.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Ability.prototype.toObject = function(opt_includeInstance) {
  return proto.Ability.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Ability} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Ability.toObject = function(includeInstance, msg) {
  var f, obj = {
    abilityid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    targetedabilitydata: (f = msg.getTargetedabilitydata()) && proto.Ability.TargetedAbilityData.toObject(includeInstance, f),
    aimedabilitydata: (f = msg.getAimedabilitydata()) && proto.Ability.AimedAbilityData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Ability}
 */
proto.Ability.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Ability;
  return proto.Ability.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Ability} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Ability}
 */
proto.Ability.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAbilityid(value);
      break;
    case 2:
      var value = new proto.Ability.TargetedAbilityData;
      reader.readMessage(value,proto.Ability.TargetedAbilityData.deserializeBinaryFromReader);
      msg.setTargetedabilitydata(value);
      break;
    case 3:
      var value = new proto.Ability.AimedAbilityData;
      reader.readMessage(value,proto.Ability.AimedAbilityData.deserializeBinaryFromReader);
      msg.setAimedabilitydata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Ability.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Ability.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Ability} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Ability.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAbilityid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTargetedabilitydata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Ability.TargetedAbilityData.serializeBinaryToWriter
    );
  }
  f = message.getAimedabilitydata();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Ability.AimedAbilityData.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.Ability.AbilityDataType = {
  SIMPLE: 0,
  TARGETED: 1,
  AIMED: 2
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Ability.TargetedAbilityData.prototype.toObject = function(opt_includeInstance) {
  return proto.Ability.TargetedAbilityData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Ability.TargetedAbilityData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Ability.TargetedAbilityData.toObject = function(includeInstance, msg) {
  var f, obj = {
    target: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Ability.TargetedAbilityData}
 */
proto.Ability.TargetedAbilityData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Ability.TargetedAbilityData;
  return proto.Ability.TargetedAbilityData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Ability.TargetedAbilityData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Ability.TargetedAbilityData}
 */
proto.Ability.TargetedAbilityData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTarget(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Ability.TargetedAbilityData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Ability.TargetedAbilityData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Ability.TargetedAbilityData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Ability.TargetedAbilityData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTarget();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 target = 1;
 * @return {number}
 */
proto.Ability.TargetedAbilityData.prototype.getTarget = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Ability.TargetedAbilityData} returns this
 */
proto.Ability.TargetedAbilityData.prototype.setTarget = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Ability.AimedAbilityData.prototype.toObject = function(opt_includeInstance) {
  return proto.Ability.AimedAbilityData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Ability.AimedAbilityData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Ability.AimedAbilityData.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Ability.AimedAbilityData}
 */
proto.Ability.AimedAbilityData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Ability.AimedAbilityData;
  return proto.Ability.AimedAbilityData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Ability.AimedAbilityData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Ability.AimedAbilityData}
 */
proto.Ability.AimedAbilityData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Ability.AimedAbilityData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Ability.AimedAbilityData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Ability.AimedAbilityData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Ability.AimedAbilityData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float x = 1;
 * @return {number}
 */
proto.Ability.AimedAbilityData.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Ability.AimedAbilityData} returns this
 */
proto.Ability.AimedAbilityData.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.Ability.AimedAbilityData.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Ability.AimedAbilityData} returns this
 */
proto.Ability.AimedAbilityData.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional int32 abilityID = 1;
 * @return {number}
 */
proto.Ability.prototype.getAbilityid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Ability} returns this
 */
proto.Ability.prototype.setAbilityid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional TargetedAbilityData targetedAbilityData = 2;
 * @return {?proto.Ability.TargetedAbilityData}
 */
proto.Ability.prototype.getTargetedabilitydata = function() {
  return /** @type{?proto.Ability.TargetedAbilityData} */ (
    jspb.Message.getWrapperField(this, proto.Ability.TargetedAbilityData, 2));
};


/**
 * @param {?proto.Ability.TargetedAbilityData|undefined} value
 * @return {!proto.Ability} returns this
*/
proto.Ability.prototype.setTargetedabilitydata = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.Ability.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Ability} returns this
 */
proto.Ability.prototype.clearTargetedabilitydata = function() {
  return this.setTargetedabilitydata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Ability.prototype.hasTargetedabilitydata = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AimedAbilityData aimedAbilityData = 3;
 * @return {?proto.Ability.AimedAbilityData}
 */
proto.Ability.prototype.getAimedabilitydata = function() {
  return /** @type{?proto.Ability.AimedAbilityData} */ (
    jspb.Message.getWrapperField(this, proto.Ability.AimedAbilityData, 3));
};


/**
 * @param {?proto.Ability.AimedAbilityData|undefined} value
 * @return {!proto.Ability} returns this
*/
proto.Ability.prototype.setAimedabilitydata = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.Ability.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Ability} returns this
 */
proto.Ability.prototype.clearAimedabilitydata = function() {
  return this.setAimedabilitydata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Ability.prototype.hasAimedabilitydata = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto);

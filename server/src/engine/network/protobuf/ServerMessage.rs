// This file is generated by rust-protobuf 2.10.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `ServerMessage.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_10_1;

#[derive(PartialEq,Clone,Default)]
pub struct ServerMessage {
    // message fields
    pub msgType: ServerMessage_ServerMessageType,
    // message oneof groups
    pub msgData: ::std::option::Option<ServerMessage_oneof_msgData>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ServerMessage {
    fn default() -> &'a ServerMessage {
        <ServerMessage as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ServerMessage_oneof_msgData {
    updateTick(ServerMessage_UpdateTick),
    verifyUuid(ServerMessage_VerifyUuid),
    verifiedUuid(ServerMessage_VerifiedUuid),
}

impl ServerMessage {
    pub fn new() -> ServerMessage {
        ::std::default::Default::default()
    }

    // .ServerMessage.ServerMessageType msgType = 1;


    pub fn get_msgType(&self) -> ServerMessage_ServerMessageType {
        self.msgType
    }
    pub fn clear_msgType(&mut self) {
        self.msgType = ServerMessage_ServerMessageType::NONE;
    }

    // Param is passed by value, moved
    pub fn set_msgType(&mut self, v: ServerMessage_ServerMessageType) {
        self.msgType = v;
    }

    // .ServerMessage.UpdateTick updateTick = 2;


    pub fn get_updateTick(&self) -> &ServerMessage_UpdateTick {
        match self.msgData {
            ::std::option::Option::Some(ServerMessage_oneof_msgData::updateTick(ref v)) => v,
            _ => ServerMessage_UpdateTick::default_instance(),
        }
    }
    pub fn clear_updateTick(&mut self) {
        self.msgData = ::std::option::Option::None;
    }

    pub fn has_updateTick(&self) -> bool {
        match self.msgData {
            ::std::option::Option::Some(ServerMessage_oneof_msgData::updateTick(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_updateTick(&mut self, v: ServerMessage_UpdateTick) {
        self.msgData = ::std::option::Option::Some(ServerMessage_oneof_msgData::updateTick(v))
    }

    // Mutable pointer to the field.
    pub fn mut_updateTick(&mut self) -> &mut ServerMessage_UpdateTick {
        if let ::std::option::Option::Some(ServerMessage_oneof_msgData::updateTick(_)) = self.msgData {
        } else {
            self.msgData = ::std::option::Option::Some(ServerMessage_oneof_msgData::updateTick(ServerMessage_UpdateTick::new()));
        }
        match self.msgData {
            ::std::option::Option::Some(ServerMessage_oneof_msgData::updateTick(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_updateTick(&mut self) -> ServerMessage_UpdateTick {
        if self.has_updateTick() {
            match self.msgData.take() {
                ::std::option::Option::Some(ServerMessage_oneof_msgData::updateTick(v)) => v,
                _ => panic!(),
            }
        } else {
            ServerMessage_UpdateTick::new()
        }
    }

    // .ServerMessage.VerifyUuid verifyUuid = 100;


    pub fn get_verifyUuid(&self) -> &ServerMessage_VerifyUuid {
        match self.msgData {
            ::std::option::Option::Some(ServerMessage_oneof_msgData::verifyUuid(ref v)) => v,
            _ => ServerMessage_VerifyUuid::default_instance(),
        }
    }
    pub fn clear_verifyUuid(&mut self) {
        self.msgData = ::std::option::Option::None;
    }

    pub fn has_verifyUuid(&self) -> bool {
        match self.msgData {
            ::std::option::Option::Some(ServerMessage_oneof_msgData::verifyUuid(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_verifyUuid(&mut self, v: ServerMessage_VerifyUuid) {
        self.msgData = ::std::option::Option::Some(ServerMessage_oneof_msgData::verifyUuid(v))
    }

    // Mutable pointer to the field.
    pub fn mut_verifyUuid(&mut self) -> &mut ServerMessage_VerifyUuid {
        if let ::std::option::Option::Some(ServerMessage_oneof_msgData::verifyUuid(_)) = self.msgData {
        } else {
            self.msgData = ::std::option::Option::Some(ServerMessage_oneof_msgData::verifyUuid(ServerMessage_VerifyUuid::new()));
        }
        match self.msgData {
            ::std::option::Option::Some(ServerMessage_oneof_msgData::verifyUuid(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_verifyUuid(&mut self) -> ServerMessage_VerifyUuid {
        if self.has_verifyUuid() {
            match self.msgData.take() {
                ::std::option::Option::Some(ServerMessage_oneof_msgData::verifyUuid(v)) => v,
                _ => panic!(),
            }
        } else {
            ServerMessage_VerifyUuid::new()
        }
    }

    // .ServerMessage.VerifiedUuid verifiedUuid = 101;


    pub fn get_verifiedUuid(&self) -> &ServerMessage_VerifiedUuid {
        match self.msgData {
            ::std::option::Option::Some(ServerMessage_oneof_msgData::verifiedUuid(ref v)) => v,
            _ => ServerMessage_VerifiedUuid::default_instance(),
        }
    }
    pub fn clear_verifiedUuid(&mut self) {
        self.msgData = ::std::option::Option::None;
    }

    pub fn has_verifiedUuid(&self) -> bool {
        match self.msgData {
            ::std::option::Option::Some(ServerMessage_oneof_msgData::verifiedUuid(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_verifiedUuid(&mut self, v: ServerMessage_VerifiedUuid) {
        self.msgData = ::std::option::Option::Some(ServerMessage_oneof_msgData::verifiedUuid(v))
    }

    // Mutable pointer to the field.
    pub fn mut_verifiedUuid(&mut self) -> &mut ServerMessage_VerifiedUuid {
        if let ::std::option::Option::Some(ServerMessage_oneof_msgData::verifiedUuid(_)) = self.msgData {
        } else {
            self.msgData = ::std::option::Option::Some(ServerMessage_oneof_msgData::verifiedUuid(ServerMessage_VerifiedUuid::new()));
        }
        match self.msgData {
            ::std::option::Option::Some(ServerMessage_oneof_msgData::verifiedUuid(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_verifiedUuid(&mut self) -> ServerMessage_VerifiedUuid {
        if self.has_verifiedUuid() {
            match self.msgData.take() {
                ::std::option::Option::Some(ServerMessage_oneof_msgData::verifiedUuid(v)) => v,
                _ => panic!(),
            }
        } else {
            ServerMessage_VerifiedUuid::new()
        }
    }
}

impl ::protobuf::Message for ServerMessage {
    fn is_initialized(&self) -> bool {
        if let Some(ServerMessage_oneof_msgData::updateTick(ref v)) = self.msgData {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ServerMessage_oneof_msgData::verifyUuid(ref v)) = self.msgData {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ServerMessage_oneof_msgData::verifiedUuid(ref v)) = self.msgData {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.msgType, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.msgData = ::std::option::Option::Some(ServerMessage_oneof_msgData::updateTick(is.read_message()?));
                },
                100 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.msgData = ::std::option::Option::Some(ServerMessage_oneof_msgData::verifyUuid(is.read_message()?));
                },
                101 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.msgData = ::std::option::Option::Some(ServerMessage_oneof_msgData::verifiedUuid(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.msgType != ServerMessage_ServerMessageType::NONE {
            my_size += ::protobuf::rt::enum_size(1, self.msgType);
        }
        if let ::std::option::Option::Some(ref v) = self.msgData {
            match v {
                &ServerMessage_oneof_msgData::updateTick(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ServerMessage_oneof_msgData::verifyUuid(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ServerMessage_oneof_msgData::verifiedUuid(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.msgType != ServerMessage_ServerMessageType::NONE {
            os.write_enum(1, self.msgType.value())?;
        }
        if let ::std::option::Option::Some(ref v) = self.msgData {
            match v {
                &ServerMessage_oneof_msgData::updateTick(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ServerMessage_oneof_msgData::verifyUuid(ref v) => {
                    os.write_tag(100, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ServerMessage_oneof_msgData::verifiedUuid(ref v) => {
                    os.write_tag(101, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ServerMessage {
        ServerMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ServerMessage_ServerMessageType>>(
                    "msgType",
                    |m: &ServerMessage| { &m.msgType },
                    |m: &mut ServerMessage| { &mut m.msgType },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ServerMessage_UpdateTick>(
                    "updateTick",
                    ServerMessage::has_updateTick,
                    ServerMessage::get_updateTick,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ServerMessage_VerifyUuid>(
                    "verifyUuid",
                    ServerMessage::has_verifyUuid,
                    ServerMessage::get_verifyUuid,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ServerMessage_VerifiedUuid>(
                    "verifiedUuid",
                    ServerMessage::has_verifiedUuid,
                    ServerMessage::get_verifiedUuid,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ServerMessage>(
                    "ServerMessage",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ServerMessage {
        static mut instance: ::protobuf::lazy::Lazy<ServerMessage> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ServerMessage,
        };
        unsafe {
            instance.get(ServerMessage::new)
        }
    }
}

impl ::protobuf::Clear for ServerMessage {
    fn clear(&mut self) {
        self.msgType = ServerMessage_ServerMessageType::NONE;
        self.msgData = ::std::option::Option::None;
        self.msgData = ::std::option::Option::None;
        self.msgData = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ServerMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ServerMessage_UpdateTick {
    // message fields
    pub frame: u32,
    pub entity: u32,
    pub x: f32,
    pub y: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ServerMessage_UpdateTick {
    fn default() -> &'a ServerMessage_UpdateTick {
        <ServerMessage_UpdateTick as ::protobuf::Message>::default_instance()
    }
}

impl ServerMessage_UpdateTick {
    pub fn new() -> ServerMessage_UpdateTick {
        ::std::default::Default::default()
    }

    // uint32 frame = 1;


    pub fn get_frame(&self) -> u32 {
        self.frame
    }
    pub fn clear_frame(&mut self) {
        self.frame = 0;
    }

    // Param is passed by value, moved
    pub fn set_frame(&mut self, v: u32) {
        self.frame = v;
    }

    // uint32 entity = 2;


    pub fn get_entity(&self) -> u32 {
        self.entity
    }
    pub fn clear_entity(&mut self) {
        self.entity = 0;
    }

    // Param is passed by value, moved
    pub fn set_entity(&mut self, v: u32) {
        self.entity = v;
    }

    // float x = 3;


    pub fn get_x(&self) -> f32 {
        self.x
    }
    pub fn clear_x(&mut self) {
        self.x = 0.;
    }

    // Param is passed by value, moved
    pub fn set_x(&mut self, v: f32) {
        self.x = v;
    }

    // float y = 4;


    pub fn get_y(&self) -> f32 {
        self.y
    }
    pub fn clear_y(&mut self) {
        self.y = 0.;
    }

    // Param is passed by value, moved
    pub fn set_y(&mut self, v: f32) {
        self.y = v;
    }
}

impl ::protobuf::Message for ServerMessage_UpdateTick {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.frame = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.entity = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.x = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.y = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.frame != 0 {
            my_size += ::protobuf::rt::value_size(1, self.frame, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.entity != 0 {
            my_size += ::protobuf::rt::value_size(2, self.entity, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.x != 0. {
            my_size += 5;
        }
        if self.y != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.frame != 0 {
            os.write_uint32(1, self.frame)?;
        }
        if self.entity != 0 {
            os.write_uint32(2, self.entity)?;
        }
        if self.x != 0. {
            os.write_float(3, self.x)?;
        }
        if self.y != 0. {
            os.write_float(4, self.y)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ServerMessage_UpdateTick {
        ServerMessage_UpdateTick::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "frame",
                    |m: &ServerMessage_UpdateTick| { &m.frame },
                    |m: &mut ServerMessage_UpdateTick| { &mut m.frame },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "entity",
                    |m: &ServerMessage_UpdateTick| { &m.entity },
                    |m: &mut ServerMessage_UpdateTick| { &mut m.entity },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "x",
                    |m: &ServerMessage_UpdateTick| { &m.x },
                    |m: &mut ServerMessage_UpdateTick| { &mut m.x },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "y",
                    |m: &ServerMessage_UpdateTick| { &m.y },
                    |m: &mut ServerMessage_UpdateTick| { &mut m.y },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ServerMessage_UpdateTick>(
                    "ServerMessage_UpdateTick",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ServerMessage_UpdateTick {
        static mut instance: ::protobuf::lazy::Lazy<ServerMessage_UpdateTick> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ServerMessage_UpdateTick,
        };
        unsafe {
            instance.get(ServerMessage_UpdateTick::new)
        }
    }
}

impl ::protobuf::Clear for ServerMessage_UpdateTick {
    fn clear(&mut self) {
        self.frame = 0;
        self.entity = 0;
        self.x = 0.;
        self.y = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ServerMessage_UpdateTick {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerMessage_UpdateTick {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ServerMessage_VerifyUuid {
    // message fields
    pub uuid: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ServerMessage_VerifyUuid {
    fn default() -> &'a ServerMessage_VerifyUuid {
        <ServerMessage_VerifyUuid as ::protobuf::Message>::default_instance()
    }
}

impl ServerMessage_VerifyUuid {
    pub fn new() -> ServerMessage_VerifyUuid {
        ::std::default::Default::default()
    }

    // string uuid = 1;


    pub fn get_uuid(&self) -> &str {
        &self.uuid
    }
    pub fn clear_uuid(&mut self) {
        self.uuid.clear();
    }

    // Param is passed by value, moved
    pub fn set_uuid(&mut self, v: ::std::string::String) {
        self.uuid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uuid(&mut self) -> &mut ::std::string::String {
        &mut self.uuid
    }

    // Take field
    pub fn take_uuid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.uuid, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ServerMessage_VerifyUuid {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.uuid)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.uuid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.uuid);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.uuid.is_empty() {
            os.write_string(1, &self.uuid)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ServerMessage_VerifyUuid {
        ServerMessage_VerifyUuid::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "uuid",
                    |m: &ServerMessage_VerifyUuid| { &m.uuid },
                    |m: &mut ServerMessage_VerifyUuid| { &mut m.uuid },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ServerMessage_VerifyUuid>(
                    "ServerMessage_VerifyUuid",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ServerMessage_VerifyUuid {
        static mut instance: ::protobuf::lazy::Lazy<ServerMessage_VerifyUuid> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ServerMessage_VerifyUuid,
        };
        unsafe {
            instance.get(ServerMessage_VerifyUuid::new)
        }
    }
}

impl ::protobuf::Clear for ServerMessage_VerifyUuid {
    fn clear(&mut self) {
        self.uuid.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ServerMessage_VerifyUuid {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerMessage_VerifyUuid {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ServerMessage_VerifiedUuid {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ServerMessage_VerifiedUuid {
    fn default() -> &'a ServerMessage_VerifiedUuid {
        <ServerMessage_VerifiedUuid as ::protobuf::Message>::default_instance()
    }
}

impl ServerMessage_VerifiedUuid {
    pub fn new() -> ServerMessage_VerifiedUuid {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ServerMessage_VerifiedUuid {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ServerMessage_VerifiedUuid {
        ServerMessage_VerifiedUuid::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<ServerMessage_VerifiedUuid>(
                    "ServerMessage_VerifiedUuid",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ServerMessage_VerifiedUuid {
        static mut instance: ::protobuf::lazy::Lazy<ServerMessage_VerifiedUuid> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ServerMessage_VerifiedUuid,
        };
        unsafe {
            instance.get(ServerMessage_VerifiedUuid::new)
        }
    }
}

impl ::protobuf::Clear for ServerMessage_VerifiedUuid {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ServerMessage_VerifiedUuid {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerMessage_VerifiedUuid {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ServerMessage_ServerMessageType {
    NONE = 0,
    UPDATETICK = 1,
    VERIFYUUID = 2,
    VERIFIEDUUID = 3,
}

impl ::protobuf::ProtobufEnum for ServerMessage_ServerMessageType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ServerMessage_ServerMessageType> {
        match value {
            0 => ::std::option::Option::Some(ServerMessage_ServerMessageType::NONE),
            1 => ::std::option::Option::Some(ServerMessage_ServerMessageType::UPDATETICK),
            2 => ::std::option::Option::Some(ServerMessage_ServerMessageType::VERIFYUUID),
            3 => ::std::option::Option::Some(ServerMessage_ServerMessageType::VERIFIEDUUID),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ServerMessage_ServerMessageType] = &[
            ServerMessage_ServerMessageType::NONE,
            ServerMessage_ServerMessageType::UPDATETICK,
            ServerMessage_ServerMessageType::VERIFYUUID,
            ServerMessage_ServerMessageType::VERIFIEDUUID,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("ServerMessage_ServerMessageType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for ServerMessage_ServerMessageType {
}

impl ::std::default::Default for ServerMessage_ServerMessageType {
    fn default() -> Self {
        ServerMessage_ServerMessageType::NONE
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerMessage_ServerMessageType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13ServerMessage.proto\"\xee\x03\n\rServerMessage\x12:\n\x07msgType\
    \x18\x01\x20\x01(\x0e2\x20.ServerMessage.ServerMessageTypeR\x07msgType\
    \x12;\n\nupdateTick\x18\x02\x20\x01(\x0b2\x19.ServerMessage.UpdateTickH\
    \0R\nupdateTick\x12;\n\nverifyUuid\x18d\x20\x01(\x0b2\x19.ServerMessage.\
    VerifyUuidH\0R\nverifyUuid\x12A\n\x0cverifiedUuid\x18e\x20\x01(\x0b2\x1b\
    .ServerMessage.VerifiedUuidH\0R\x0cverifiedUuid\x1aV\n\nUpdateTick\x12\
    \x14\n\x05frame\x18\x01\x20\x01(\rR\x05frame\x12\x16\n\x06entity\x18\x02\
    \x20\x01(\rR\x06entity\x12\x0c\n\x01x\x18\x03\x20\x01(\x02R\x01x\x12\x0c\
    \n\x01y\x18\x04\x20\x01(\x02R\x01y\x1a\x20\n\nVerifyUuid\x12\x12\n\x04uu\
    id\x18\x01\x20\x01(\tR\x04uuid\x1a\x0e\n\x0cVerifiedUuid\"O\n\x11ServerM\
    essageType\x12\x08\n\x04NONE\x10\0\x12\x0e\n\nUPDATETICK\x10\x01\x12\x0e\
    \n\nVERIFYUUID\x10\x02\x12\x10\n\x0cVERIFIEDUUID\x10\x03B\t\n\x07msgData\
    J\xa5\x07\n\x06\x12\x04\0\0\x20\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\n\
    \n\x02\x04\0\x12\x04\x02\0\x20\x01\n\n\n\x03\x04\0\x01\x12\x03\x02\x08\
    \x15\n\x0c\n\x04\x04\0\x04\0\x12\x04\x03\x02\x08\x03\n\x0c\n\x05\x04\0\
    \x04\0\x01\x12\x03\x03\x07\x18\n\r\n\x06\x04\0\x04\0\x02\0\x12\x03\x04\
    \x04\r\n\x0e\n\x07\x04\0\x04\0\x02\0\x01\x12\x03\x04\x04\x08\n\x0e\n\x07\
    \x04\0\x04\0\x02\0\x02\x12\x03\x04\x0b\x0c\n\r\n\x06\x04\0\x04\0\x02\x01\
    \x12\x03\x05\x04\x13\n\x0e\n\x07\x04\0\x04\0\x02\x01\x01\x12\x03\x05\x04\
    \x0e\n\x0e\n\x07\x04\0\x04\0\x02\x01\x02\x12\x03\x05\x11\x12\n\r\n\x06\
    \x04\0\x04\0\x02\x02\x12\x03\x06\x04\x13\n\x0e\n\x07\x04\0\x04\0\x02\x02\
    \x01\x12\x03\x06\x04\x0e\n\x0e\n\x07\x04\0\x04\0\x02\x02\x02\x12\x03\x06\
    \x11\x12\n\r\n\x06\x04\0\x04\0\x02\x03\x12\x03\x07\x04\x15\n\x0e\n\x07\
    \x04\0\x04\0\x02\x03\x01\x12\x03\x07\x04\x10\n\x0e\n\x07\x04\0\x04\0\x02\
    \x03\x02\x12\x03\x07\x13\x14\n\x0c\n\x04\x04\0\x03\0\x12\x04\n\x02\x0f\
    \x03\n\x0c\n\x05\x04\0\x03\0\x01\x12\x03\n\n\x14\n\r\n\x06\x04\0\x03\0\
    \x02\0\x12\x03\x0b\x04\x15\n\x0e\n\x07\x04\0\x03\0\x02\0\x05\x12\x03\x0b\
    \x04\n\n\x0e\n\x07\x04\0\x03\0\x02\0\x01\x12\x03\x0b\x0b\x10\n\x0e\n\x07\
    \x04\0\x03\0\x02\0\x03\x12\x03\x0b\x13\x14\n\r\n\x06\x04\0\x03\0\x02\x01\
    \x12\x03\x0c\x04\x16\n\x0e\n\x07\x04\0\x03\0\x02\x01\x05\x12\x03\x0c\x04\
    \n\n\x0e\n\x07\x04\0\x03\0\x02\x01\x01\x12\x03\x0c\x0b\x11\n\x0e\n\x07\
    \x04\0\x03\0\x02\x01\x03\x12\x03\x0c\x14\x15\n\r\n\x06\x04\0\x03\0\x02\
    \x02\x12\x03\r\x04\x10\n\x0e\n\x07\x04\0\x03\0\x02\x02\x05\x12\x03\r\x04\
    \t\n\x0e\n\x07\x04\0\x03\0\x02\x02\x01\x12\x03\r\n\x0b\n\x0e\n\x07\x04\0\
    \x03\0\x02\x02\x03\x12\x03\r\x0e\x0f\n\r\n\x06\x04\0\x03\0\x02\x03\x12\
    \x03\x0e\x04\x10\n\x0e\n\x07\x04\0\x03\0\x02\x03\x05\x12\x03\x0e\x04\t\n\
    \x0e\n\x07\x04\0\x03\0\x02\x03\x01\x12\x03\x0e\n\x0b\n\x0e\n\x07\x04\0\
    \x03\0\x02\x03\x03\x12\x03\x0e\x0e\x0f\n\x0c\n\x04\x04\0\x03\x01\x12\x04\
    \x11\x02\x13\x03\n\x0c\n\x05\x04\0\x03\x01\x01\x12\x03\x11\n\x14\n\r\n\
    \x06\x04\0\x03\x01\x02\0\x12\x03\x12\x04\x14\n\x0e\n\x07\x04\0\x03\x01\
    \x02\0\x05\x12\x03\x12\x04\n\n\x0e\n\x07\x04\0\x03\x01\x02\0\x01\x12\x03\
    \x12\x0b\x0f\n\x0e\n\x07\x04\0\x03\x01\x02\0\x03\x12\x03\x12\x12\x13\n\
    \x0b\n\x04\x04\0\x03\x02\x12\x03\x15\x02\x1a\n\x0c\n\x05\x04\0\x03\x02\
    \x01\x12\x03\x15\n\x16\n(\n\x04\x04\0\x02\0\x12\x03\x19\x02\x20\x1a\x1bD\
    efine\x20actual\x20message\x20Data\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\
    \x19\x02\x13\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x19\x14\x1b\n\x0c\n\x05\
    \x04\0\x02\0\x03\x12\x03\x19\x1e\x1f\n\x0c\n\x04\x04\0\x08\0\x12\x04\x1b\
    \x02\x1f\x03\n\x0c\n\x05\x04\0\x08\0\x01\x12\x03\x1b\x08\x0f\n\x0b\n\x04\
    \x04\0\x02\x01\x12\x03\x1c\x04\x1e\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\
    \x1c\x04\x0e\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x1c\x0f\x19\n\x0c\n\
    \x05\x04\0\x02\x01\x03\x12\x03\x1c\x1c\x1d\n\x0b\n\x04\x04\0\x02\x02\x12\
    \x03\x1d\x04\x20\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03\x1d\x04\x0e\n\x0c\
    \n\x05\x04\0\x02\x02\x01\x12\x03\x1d\x0f\x19\n\x0c\n\x05\x04\0\x02\x02\
    \x03\x12\x03\x1d\x1c\x1f\n\x0b\n\x04\x04\0\x02\x03\x12\x03\x1e\x04$\n\
    \x0c\n\x05\x04\0\x02\x03\x06\x12\x03\x1e\x04\x10\n\x0c\n\x05\x04\0\x02\
    \x03\x01\x12\x03\x1e\x11\x1d\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x1e\
    \x20#b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}

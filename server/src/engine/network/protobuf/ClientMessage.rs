// This file is generated by rust-protobuf 2.10.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `ClientMessage.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_10_1;

#[derive(PartialEq,Clone,Default)]
pub struct ClientMessage {
    // message oneof groups
    pub msgData: ::std::option::Option<ClientMessage_oneof_msgData>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientMessage {
    fn default() -> &'a ClientMessage {
        <ClientMessage as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ClientMessage_oneof_msgData {
    ack(ClientMessage_Ack),
    command(Command),
    veryfiyRtc(ClientMessage_VerifyRtc),
}

impl ClientMessage {
    pub fn new() -> ClientMessage {
        ::std::default::Default::default()
    }

    // .ClientMessage.Ack ack = 1;


    pub fn get_ack(&self) -> &ClientMessage_Ack {
        match self.msgData {
            ::std::option::Option::Some(ClientMessage_oneof_msgData::ack(ref v)) => v,
            _ => ClientMessage_Ack::default_instance(),
        }
    }
    pub fn clear_ack(&mut self) {
        self.msgData = ::std::option::Option::None;
    }

    pub fn has_ack(&self) -> bool {
        match self.msgData {
            ::std::option::Option::Some(ClientMessage_oneof_msgData::ack(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ack(&mut self, v: ClientMessage_Ack) {
        self.msgData = ::std::option::Option::Some(ClientMessage_oneof_msgData::ack(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ack(&mut self) -> &mut ClientMessage_Ack {
        if let ::std::option::Option::Some(ClientMessage_oneof_msgData::ack(_)) = self.msgData {
        } else {
            self.msgData = ::std::option::Option::Some(ClientMessage_oneof_msgData::ack(ClientMessage_Ack::new()));
        }
        match self.msgData {
            ::std::option::Option::Some(ClientMessage_oneof_msgData::ack(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ack(&mut self) -> ClientMessage_Ack {
        if self.has_ack() {
            match self.msgData.take() {
                ::std::option::Option::Some(ClientMessage_oneof_msgData::ack(v)) => v,
                _ => panic!(),
            }
        } else {
            ClientMessage_Ack::new()
        }
    }

    // .Command command = 2;


    pub fn get_command(&self) -> &Command {
        match self.msgData {
            ::std::option::Option::Some(ClientMessage_oneof_msgData::command(ref v)) => v,
            _ => Command::default_instance(),
        }
    }
    pub fn clear_command(&mut self) {
        self.msgData = ::std::option::Option::None;
    }

    pub fn has_command(&self) -> bool {
        match self.msgData {
            ::std::option::Option::Some(ClientMessage_oneof_msgData::command(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_command(&mut self, v: Command) {
        self.msgData = ::std::option::Option::Some(ClientMessage_oneof_msgData::command(v))
    }

    // Mutable pointer to the field.
    pub fn mut_command(&mut self) -> &mut Command {
        if let ::std::option::Option::Some(ClientMessage_oneof_msgData::command(_)) = self.msgData {
        } else {
            self.msgData = ::std::option::Option::Some(ClientMessage_oneof_msgData::command(Command::new()));
        }
        match self.msgData {
            ::std::option::Option::Some(ClientMessage_oneof_msgData::command(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_command(&mut self) -> Command {
        if self.has_command() {
            match self.msgData.take() {
                ::std::option::Option::Some(ClientMessage_oneof_msgData::command(v)) => v,
                _ => panic!(),
            }
        } else {
            Command::new()
        }
    }

    // .ClientMessage.VerifyRtc veryfiyRtc = 100;


    pub fn get_veryfiyRtc(&self) -> &ClientMessage_VerifyRtc {
        match self.msgData {
            ::std::option::Option::Some(ClientMessage_oneof_msgData::veryfiyRtc(ref v)) => v,
            _ => ClientMessage_VerifyRtc::default_instance(),
        }
    }
    pub fn clear_veryfiyRtc(&mut self) {
        self.msgData = ::std::option::Option::None;
    }

    pub fn has_veryfiyRtc(&self) -> bool {
        match self.msgData {
            ::std::option::Option::Some(ClientMessage_oneof_msgData::veryfiyRtc(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_veryfiyRtc(&mut self, v: ClientMessage_VerifyRtc) {
        self.msgData = ::std::option::Option::Some(ClientMessage_oneof_msgData::veryfiyRtc(v))
    }

    // Mutable pointer to the field.
    pub fn mut_veryfiyRtc(&mut self) -> &mut ClientMessage_VerifyRtc {
        if let ::std::option::Option::Some(ClientMessage_oneof_msgData::veryfiyRtc(_)) = self.msgData {
        } else {
            self.msgData = ::std::option::Option::Some(ClientMessage_oneof_msgData::veryfiyRtc(ClientMessage_VerifyRtc::new()));
        }
        match self.msgData {
            ::std::option::Option::Some(ClientMessage_oneof_msgData::veryfiyRtc(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_veryfiyRtc(&mut self) -> ClientMessage_VerifyRtc {
        if self.has_veryfiyRtc() {
            match self.msgData.take() {
                ::std::option::Option::Some(ClientMessage_oneof_msgData::veryfiyRtc(v)) => v,
                _ => panic!(),
            }
        } else {
            ClientMessage_VerifyRtc::new()
        }
    }
}

impl ::protobuf::Message for ClientMessage {
    fn is_initialized(&self) -> bool {
        if let Some(ClientMessage_oneof_msgData::ack(ref v)) = self.msgData {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ClientMessage_oneof_msgData::command(ref v)) = self.msgData {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ClientMessage_oneof_msgData::veryfiyRtc(ref v)) = self.msgData {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.msgData = ::std::option::Option::Some(ClientMessage_oneof_msgData::ack(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.msgData = ::std::option::Option::Some(ClientMessage_oneof_msgData::command(is.read_message()?));
                },
                100 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.msgData = ::std::option::Option::Some(ClientMessage_oneof_msgData::veryfiyRtc(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.msgData {
            match v {
                &ClientMessage_oneof_msgData::ack(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ClientMessage_oneof_msgData::command(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ClientMessage_oneof_msgData::veryfiyRtc(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.msgData {
            match v {
                &ClientMessage_oneof_msgData::ack(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ClientMessage_oneof_msgData::command(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ClientMessage_oneof_msgData::veryfiyRtc(ref v) => {
                    os.write_tag(100, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientMessage {
        ClientMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ClientMessage_Ack>(
                    "ack",
                    ClientMessage::has_ack,
                    ClientMessage::get_ack,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Command>(
                    "command",
                    ClientMessage::has_command,
                    ClientMessage::get_command,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ClientMessage_VerifyRtc>(
                    "veryfiyRtc",
                    ClientMessage::has_veryfiyRtc,
                    ClientMessage::get_veryfiyRtc,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ClientMessage>(
                    "ClientMessage",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ClientMessage {
        static mut instance: ::protobuf::lazy::Lazy<ClientMessage> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ClientMessage,
        };
        unsafe {
            instance.get(ClientMessage::new)
        }
    }
}

impl ::protobuf::Clear for ClientMessage {
    fn clear(&mut self) {
        self.msgData = ::std::option::Option::None;
        self.msgData = ::std::option::Option::None;
        self.msgData = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientMessage_Ack {
    // message fields
    pub newBaseline: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientMessage_Ack {
    fn default() -> &'a ClientMessage_Ack {
        <ClientMessage_Ack as ::protobuf::Message>::default_instance()
    }
}

impl ClientMessage_Ack {
    pub fn new() -> ClientMessage_Ack {
        ::std::default::Default::default()
    }

    // uint32 newBaseline = 1;


    pub fn get_newBaseline(&self) -> u32 {
        self.newBaseline
    }
    pub fn clear_newBaseline(&mut self) {
        self.newBaseline = 0;
    }

    // Param is passed by value, moved
    pub fn set_newBaseline(&mut self, v: u32) {
        self.newBaseline = v;
    }
}

impl ::protobuf::Message for ClientMessage_Ack {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.newBaseline = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.newBaseline != 0 {
            my_size += ::protobuf::rt::value_size(1, self.newBaseline, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.newBaseline != 0 {
            os.write_uint32(1, self.newBaseline)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientMessage_Ack {
        ClientMessage_Ack::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "newBaseline",
                    |m: &ClientMessage_Ack| { &m.newBaseline },
                    |m: &mut ClientMessage_Ack| { &mut m.newBaseline },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ClientMessage_Ack>(
                    "ClientMessage_Ack",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ClientMessage_Ack {
        static mut instance: ::protobuf::lazy::Lazy<ClientMessage_Ack> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ClientMessage_Ack,
        };
        unsafe {
            instance.get(ClientMessage_Ack::new)
        }
    }
}

impl ::protobuf::Clear for ClientMessage_Ack {
    fn clear(&mut self) {
        self.newBaseline = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientMessage_Ack {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientMessage_Ack {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientMessage_VerifyRtc {
    // message fields
    pub uuid: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientMessage_VerifyRtc {
    fn default() -> &'a ClientMessage_VerifyRtc {
        <ClientMessage_VerifyRtc as ::protobuf::Message>::default_instance()
    }
}

impl ClientMessage_VerifyRtc {
    pub fn new() -> ClientMessage_VerifyRtc {
        ::std::default::Default::default()
    }

    // string uuid = 1;


    pub fn get_uuid(&self) -> &str {
        &self.uuid
    }
    pub fn clear_uuid(&mut self) {
        self.uuid.clear();
    }

    // Param is passed by value, moved
    pub fn set_uuid(&mut self, v: ::std::string::String) {
        self.uuid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uuid(&mut self) -> &mut ::std::string::String {
        &mut self.uuid
    }

    // Take field
    pub fn take_uuid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.uuid, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ClientMessage_VerifyRtc {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.uuid)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.uuid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.uuid);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.uuid.is_empty() {
            os.write_string(1, &self.uuid)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientMessage_VerifyRtc {
        ClientMessage_VerifyRtc::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "uuid",
                    |m: &ClientMessage_VerifyRtc| { &m.uuid },
                    |m: &mut ClientMessage_VerifyRtc| { &mut m.uuid },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ClientMessage_VerifyRtc>(
                    "ClientMessage_VerifyRtc",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ClientMessage_VerifyRtc {
        static mut instance: ::protobuf::lazy::Lazy<ClientMessage_VerifyRtc> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ClientMessage_VerifyRtc,
        };
        unsafe {
            instance.get(ClientMessage_VerifyRtc::new)
        }
    }
}

impl ::protobuf::Clear for ClientMessage_VerifyRtc {
    fn clear(&mut self) {
        self.uuid.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientMessage_VerifyRtc {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientMessage_VerifyRtc {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Command {
    // message oneof groups
    pub command: ::std::option::Option<Command_oneof_command>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Command {
    fn default() -> &'a Command {
        <Command as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Command_oneof_command {
    moveCommand(Command_MoveCommand),
    moveDelta(Command_MoveDelta),
    attack(Command_Attack),
    ability(Ability),
    stop(Command_Stop),
    recall(Command_Recall),
}

impl Command {
    pub fn new() -> Command {
        ::std::default::Default::default()
    }

    // .Command.MoveCommand moveCommand = 1;


    pub fn get_moveCommand(&self) -> &Command_MoveCommand {
        match self.command {
            ::std::option::Option::Some(Command_oneof_command::moveCommand(ref v)) => v,
            _ => Command_MoveCommand::default_instance(),
        }
    }
    pub fn clear_moveCommand(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_moveCommand(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(Command_oneof_command::moveCommand(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_moveCommand(&mut self, v: Command_MoveCommand) {
        self.command = ::std::option::Option::Some(Command_oneof_command::moveCommand(v))
    }

    // Mutable pointer to the field.
    pub fn mut_moveCommand(&mut self) -> &mut Command_MoveCommand {
        if let ::std::option::Option::Some(Command_oneof_command::moveCommand(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(Command_oneof_command::moveCommand(Command_MoveCommand::new()));
        }
        match self.command {
            ::std::option::Option::Some(Command_oneof_command::moveCommand(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_moveCommand(&mut self) -> Command_MoveCommand {
        if self.has_moveCommand() {
            match self.command.take() {
                ::std::option::Option::Some(Command_oneof_command::moveCommand(v)) => v,
                _ => panic!(),
            }
        } else {
            Command_MoveCommand::new()
        }
    }

    // .Command.MoveDelta moveDelta = 2;


    pub fn get_moveDelta(&self) -> &Command_MoveDelta {
        match self.command {
            ::std::option::Option::Some(Command_oneof_command::moveDelta(ref v)) => v,
            _ => Command_MoveDelta::default_instance(),
        }
    }
    pub fn clear_moveDelta(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_moveDelta(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(Command_oneof_command::moveDelta(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_moveDelta(&mut self, v: Command_MoveDelta) {
        self.command = ::std::option::Option::Some(Command_oneof_command::moveDelta(v))
    }

    // Mutable pointer to the field.
    pub fn mut_moveDelta(&mut self) -> &mut Command_MoveDelta {
        if let ::std::option::Option::Some(Command_oneof_command::moveDelta(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(Command_oneof_command::moveDelta(Command_MoveDelta::new()));
        }
        match self.command {
            ::std::option::Option::Some(Command_oneof_command::moveDelta(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_moveDelta(&mut self) -> Command_MoveDelta {
        if self.has_moveDelta() {
            match self.command.take() {
                ::std::option::Option::Some(Command_oneof_command::moveDelta(v)) => v,
                _ => panic!(),
            }
        } else {
            Command_MoveDelta::new()
        }
    }

    // .Command.Attack attack = 3;


    pub fn get_attack(&self) -> &Command_Attack {
        match self.command {
            ::std::option::Option::Some(Command_oneof_command::attack(ref v)) => v,
            _ => Command_Attack::default_instance(),
        }
    }
    pub fn clear_attack(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_attack(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(Command_oneof_command::attack(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_attack(&mut self, v: Command_Attack) {
        self.command = ::std::option::Option::Some(Command_oneof_command::attack(v))
    }

    // Mutable pointer to the field.
    pub fn mut_attack(&mut self) -> &mut Command_Attack {
        if let ::std::option::Option::Some(Command_oneof_command::attack(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(Command_oneof_command::attack(Command_Attack::new()));
        }
        match self.command {
            ::std::option::Option::Some(Command_oneof_command::attack(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_attack(&mut self) -> Command_Attack {
        if self.has_attack() {
            match self.command.take() {
                ::std::option::Option::Some(Command_oneof_command::attack(v)) => v,
                _ => panic!(),
            }
        } else {
            Command_Attack::new()
        }
    }

    // .Ability ability = 4;


    pub fn get_ability(&self) -> &Ability {
        match self.command {
            ::std::option::Option::Some(Command_oneof_command::ability(ref v)) => v,
            _ => Ability::default_instance(),
        }
    }
    pub fn clear_ability(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_ability(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(Command_oneof_command::ability(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ability(&mut self, v: Ability) {
        self.command = ::std::option::Option::Some(Command_oneof_command::ability(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ability(&mut self) -> &mut Ability {
        if let ::std::option::Option::Some(Command_oneof_command::ability(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(Command_oneof_command::ability(Ability::new()));
        }
        match self.command {
            ::std::option::Option::Some(Command_oneof_command::ability(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ability(&mut self) -> Ability {
        if self.has_ability() {
            match self.command.take() {
                ::std::option::Option::Some(Command_oneof_command::ability(v)) => v,
                _ => panic!(),
            }
        } else {
            Ability::new()
        }
    }

    // .Command.Stop stop = 5;


    pub fn get_stop(&self) -> &Command_Stop {
        match self.command {
            ::std::option::Option::Some(Command_oneof_command::stop(ref v)) => v,
            _ => Command_Stop::default_instance(),
        }
    }
    pub fn clear_stop(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_stop(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(Command_oneof_command::stop(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_stop(&mut self, v: Command_Stop) {
        self.command = ::std::option::Option::Some(Command_oneof_command::stop(v))
    }

    // Mutable pointer to the field.
    pub fn mut_stop(&mut self) -> &mut Command_Stop {
        if let ::std::option::Option::Some(Command_oneof_command::stop(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(Command_oneof_command::stop(Command_Stop::new()));
        }
        match self.command {
            ::std::option::Option::Some(Command_oneof_command::stop(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_stop(&mut self) -> Command_Stop {
        if self.has_stop() {
            match self.command.take() {
                ::std::option::Option::Some(Command_oneof_command::stop(v)) => v,
                _ => panic!(),
            }
        } else {
            Command_Stop::new()
        }
    }

    // .Command.Recall recall = 6;


    pub fn get_recall(&self) -> &Command_Recall {
        match self.command {
            ::std::option::Option::Some(Command_oneof_command::recall(ref v)) => v,
            _ => Command_Recall::default_instance(),
        }
    }
    pub fn clear_recall(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_recall(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(Command_oneof_command::recall(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_recall(&mut self, v: Command_Recall) {
        self.command = ::std::option::Option::Some(Command_oneof_command::recall(v))
    }

    // Mutable pointer to the field.
    pub fn mut_recall(&mut self) -> &mut Command_Recall {
        if let ::std::option::Option::Some(Command_oneof_command::recall(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(Command_oneof_command::recall(Command_Recall::new()));
        }
        match self.command {
            ::std::option::Option::Some(Command_oneof_command::recall(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_recall(&mut self) -> Command_Recall {
        if self.has_recall() {
            match self.command.take() {
                ::std::option::Option::Some(Command_oneof_command::recall(v)) => v,
                _ => panic!(),
            }
        } else {
            Command_Recall::new()
        }
    }
}

impl ::protobuf::Message for Command {
    fn is_initialized(&self) -> bool {
        if let Some(Command_oneof_command::moveCommand(ref v)) = self.command {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Command_oneof_command::moveDelta(ref v)) = self.command {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Command_oneof_command::attack(ref v)) = self.command {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Command_oneof_command::ability(ref v)) = self.command {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Command_oneof_command::stop(ref v)) = self.command {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Command_oneof_command::recall(ref v)) = self.command {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.command = ::std::option::Option::Some(Command_oneof_command::moveCommand(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.command = ::std::option::Option::Some(Command_oneof_command::moveDelta(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.command = ::std::option::Option::Some(Command_oneof_command::attack(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.command = ::std::option::Option::Some(Command_oneof_command::ability(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.command = ::std::option::Option::Some(Command_oneof_command::stop(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.command = ::std::option::Option::Some(Command_oneof_command::recall(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.command {
            match v {
                &Command_oneof_command::moveCommand(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Command_oneof_command::moveDelta(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Command_oneof_command::attack(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Command_oneof_command::ability(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Command_oneof_command::stop(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Command_oneof_command::recall(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.command {
            match v {
                &Command_oneof_command::moveCommand(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Command_oneof_command::moveDelta(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Command_oneof_command::attack(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Command_oneof_command::ability(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Command_oneof_command::stop(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Command_oneof_command::recall(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Command {
        Command::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Command_MoveCommand>(
                    "moveCommand",
                    Command::has_moveCommand,
                    Command::get_moveCommand,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Command_MoveDelta>(
                    "moveDelta",
                    Command::has_moveDelta,
                    Command::get_moveDelta,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Command_Attack>(
                    "attack",
                    Command::has_attack,
                    Command::get_attack,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Ability>(
                    "ability",
                    Command::has_ability,
                    Command::get_ability,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Command_Stop>(
                    "stop",
                    Command::has_stop,
                    Command::get_stop,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Command_Recall>(
                    "recall",
                    Command::has_recall,
                    Command::get_recall,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Command>(
                    "Command",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Command {
        static mut instance: ::protobuf::lazy::Lazy<Command> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Command,
        };
        unsafe {
            instance.get(Command::new)
        }
    }
}

impl ::protobuf::Clear for Command {
    fn clear(&mut self) {
        self.command = ::std::option::Option::None;
        self.command = ::std::option::Option::None;
        self.command = ::std::option::Option::None;
        self.command = ::std::option::Option::None;
        self.command = ::std::option::Option::None;
        self.command = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Command {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Command {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Command_MoveCommand {
    // message fields
    pub x: f32,
    pub y: f32,
    pub isAttack: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Command_MoveCommand {
    fn default() -> &'a Command_MoveCommand {
        <Command_MoveCommand as ::protobuf::Message>::default_instance()
    }
}

impl Command_MoveCommand {
    pub fn new() -> Command_MoveCommand {
        ::std::default::Default::default()
    }

    // float x = 1;


    pub fn get_x(&self) -> f32 {
        self.x
    }
    pub fn clear_x(&mut self) {
        self.x = 0.;
    }

    // Param is passed by value, moved
    pub fn set_x(&mut self, v: f32) {
        self.x = v;
    }

    // float y = 2;


    pub fn get_y(&self) -> f32 {
        self.y
    }
    pub fn clear_y(&mut self) {
        self.y = 0.;
    }

    // Param is passed by value, moved
    pub fn set_y(&mut self, v: f32) {
        self.y = v;
    }

    // bool isAttack = 3;


    pub fn get_isAttack(&self) -> bool {
        self.isAttack
    }
    pub fn clear_isAttack(&mut self) {
        self.isAttack = false;
    }

    // Param is passed by value, moved
    pub fn set_isAttack(&mut self, v: bool) {
        self.isAttack = v;
    }
}

impl ::protobuf::Message for Command_MoveCommand {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.x = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.y = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.isAttack = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.x != 0. {
            my_size += 5;
        }
        if self.y != 0. {
            my_size += 5;
        }
        if self.isAttack != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.x != 0. {
            os.write_float(1, self.x)?;
        }
        if self.y != 0. {
            os.write_float(2, self.y)?;
        }
        if self.isAttack != false {
            os.write_bool(3, self.isAttack)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Command_MoveCommand {
        Command_MoveCommand::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "x",
                    |m: &Command_MoveCommand| { &m.x },
                    |m: &mut Command_MoveCommand| { &mut m.x },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "y",
                    |m: &Command_MoveCommand| { &m.y },
                    |m: &mut Command_MoveCommand| { &mut m.y },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "isAttack",
                    |m: &Command_MoveCommand| { &m.isAttack },
                    |m: &mut Command_MoveCommand| { &mut m.isAttack },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Command_MoveCommand>(
                    "Command_MoveCommand",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Command_MoveCommand {
        static mut instance: ::protobuf::lazy::Lazy<Command_MoveCommand> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Command_MoveCommand,
        };
        unsafe {
            instance.get(Command_MoveCommand::new)
        }
    }
}

impl ::protobuf::Clear for Command_MoveCommand {
    fn clear(&mut self) {
        self.x = 0.;
        self.y = 0.;
        self.isAttack = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Command_MoveCommand {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Command_MoveCommand {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Command_MoveDelta {
    // message fields
    pub x: f32,
    pub y: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Command_MoveDelta {
    fn default() -> &'a Command_MoveDelta {
        <Command_MoveDelta as ::protobuf::Message>::default_instance()
    }
}

impl Command_MoveDelta {
    pub fn new() -> Command_MoveDelta {
        ::std::default::Default::default()
    }

    // float x = 1;


    pub fn get_x(&self) -> f32 {
        self.x
    }
    pub fn clear_x(&mut self) {
        self.x = 0.;
    }

    // Param is passed by value, moved
    pub fn set_x(&mut self, v: f32) {
        self.x = v;
    }

    // float y = 2;


    pub fn get_y(&self) -> f32 {
        self.y
    }
    pub fn clear_y(&mut self) {
        self.y = 0.;
    }

    // Param is passed by value, moved
    pub fn set_y(&mut self, v: f32) {
        self.y = v;
    }
}

impl ::protobuf::Message for Command_MoveDelta {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.x = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.y = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.x != 0. {
            my_size += 5;
        }
        if self.y != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.x != 0. {
            os.write_float(1, self.x)?;
        }
        if self.y != 0. {
            os.write_float(2, self.y)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Command_MoveDelta {
        Command_MoveDelta::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "x",
                    |m: &Command_MoveDelta| { &m.x },
                    |m: &mut Command_MoveDelta| { &mut m.x },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "y",
                    |m: &Command_MoveDelta| { &m.y },
                    |m: &mut Command_MoveDelta| { &mut m.y },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Command_MoveDelta>(
                    "Command_MoveDelta",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Command_MoveDelta {
        static mut instance: ::protobuf::lazy::Lazy<Command_MoveDelta> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Command_MoveDelta,
        };
        unsafe {
            instance.get(Command_MoveDelta::new)
        }
    }
}

impl ::protobuf::Clear for Command_MoveDelta {
    fn clear(&mut self) {
        self.x = 0.;
        self.y = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Command_MoveDelta {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Command_MoveDelta {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Command_Attack {
    // message fields
    pub target: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Command_Attack {
    fn default() -> &'a Command_Attack {
        <Command_Attack as ::protobuf::Message>::default_instance()
    }
}

impl Command_Attack {
    pub fn new() -> Command_Attack {
        ::std::default::Default::default()
    }

    // uint32 target = 1;


    pub fn get_target(&self) -> u32 {
        self.target
    }
    pub fn clear_target(&mut self) {
        self.target = 0;
    }

    // Param is passed by value, moved
    pub fn set_target(&mut self, v: u32) {
        self.target = v;
    }
}

impl ::protobuf::Message for Command_Attack {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.target = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.target != 0 {
            my_size += ::protobuf::rt::value_size(1, self.target, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.target != 0 {
            os.write_uint32(1, self.target)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Command_Attack {
        Command_Attack::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "target",
                    |m: &Command_Attack| { &m.target },
                    |m: &mut Command_Attack| { &mut m.target },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Command_Attack>(
                    "Command_Attack",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Command_Attack {
        static mut instance: ::protobuf::lazy::Lazy<Command_Attack> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Command_Attack,
        };
        unsafe {
            instance.get(Command_Attack::new)
        }
    }
}

impl ::protobuf::Clear for Command_Attack {
    fn clear(&mut self) {
        self.target = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Command_Attack {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Command_Attack {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Command_Stop {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Command_Stop {
    fn default() -> &'a Command_Stop {
        <Command_Stop as ::protobuf::Message>::default_instance()
    }
}

impl Command_Stop {
    pub fn new() -> Command_Stop {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Command_Stop {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Command_Stop {
        Command_Stop::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<Command_Stop>(
                    "Command_Stop",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Command_Stop {
        static mut instance: ::protobuf::lazy::Lazy<Command_Stop> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Command_Stop,
        };
        unsafe {
            instance.get(Command_Stop::new)
        }
    }
}

impl ::protobuf::Clear for Command_Stop {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Command_Stop {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Command_Stop {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Command_Recall {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Command_Recall {
    fn default() -> &'a Command_Recall {
        <Command_Recall as ::protobuf::Message>::default_instance()
    }
}

impl Command_Recall {
    pub fn new() -> Command_Recall {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Command_Recall {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Command_Recall {
        Command_Recall::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<Command_Recall>(
                    "Command_Recall",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Command_Recall {
        static mut instance: ::protobuf::lazy::Lazy<Command_Recall> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Command_Recall,
        };
        unsafe {
            instance.get(Command_Recall::new)
        }
    }
}

impl ::protobuf::Clear for Command_Recall {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Command_Recall {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Command_Recall {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Ability {
    // message fields
    pub abilityID: i32,
    // message oneof groups
    pub abilityData: ::std::option::Option<Ability_oneof_abilityData>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Ability {
    fn default() -> &'a Ability {
        <Ability as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Ability_oneof_abilityData {
    targetedAbilityData(Ability_TargetedAbilityData),
    aimedAbilityData(Ability_AimedAbilityData),
}

impl Ability {
    pub fn new() -> Ability {
        ::std::default::Default::default()
    }

    // int32 abilityID = 1;


    pub fn get_abilityID(&self) -> i32 {
        self.abilityID
    }
    pub fn clear_abilityID(&mut self) {
        self.abilityID = 0;
    }

    // Param is passed by value, moved
    pub fn set_abilityID(&mut self, v: i32) {
        self.abilityID = v;
    }

    // .Ability.TargetedAbilityData targetedAbilityData = 2;


    pub fn get_targetedAbilityData(&self) -> &Ability_TargetedAbilityData {
        match self.abilityData {
            ::std::option::Option::Some(Ability_oneof_abilityData::targetedAbilityData(ref v)) => v,
            _ => Ability_TargetedAbilityData::default_instance(),
        }
    }
    pub fn clear_targetedAbilityData(&mut self) {
        self.abilityData = ::std::option::Option::None;
    }

    pub fn has_targetedAbilityData(&self) -> bool {
        match self.abilityData {
            ::std::option::Option::Some(Ability_oneof_abilityData::targetedAbilityData(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_targetedAbilityData(&mut self, v: Ability_TargetedAbilityData) {
        self.abilityData = ::std::option::Option::Some(Ability_oneof_abilityData::targetedAbilityData(v))
    }

    // Mutable pointer to the field.
    pub fn mut_targetedAbilityData(&mut self) -> &mut Ability_TargetedAbilityData {
        if let ::std::option::Option::Some(Ability_oneof_abilityData::targetedAbilityData(_)) = self.abilityData {
        } else {
            self.abilityData = ::std::option::Option::Some(Ability_oneof_abilityData::targetedAbilityData(Ability_TargetedAbilityData::new()));
        }
        match self.abilityData {
            ::std::option::Option::Some(Ability_oneof_abilityData::targetedAbilityData(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_targetedAbilityData(&mut self) -> Ability_TargetedAbilityData {
        if self.has_targetedAbilityData() {
            match self.abilityData.take() {
                ::std::option::Option::Some(Ability_oneof_abilityData::targetedAbilityData(v)) => v,
                _ => panic!(),
            }
        } else {
            Ability_TargetedAbilityData::new()
        }
    }

    // .Ability.AimedAbilityData aimedAbilityData = 3;


    pub fn get_aimedAbilityData(&self) -> &Ability_AimedAbilityData {
        match self.abilityData {
            ::std::option::Option::Some(Ability_oneof_abilityData::aimedAbilityData(ref v)) => v,
            _ => Ability_AimedAbilityData::default_instance(),
        }
    }
    pub fn clear_aimedAbilityData(&mut self) {
        self.abilityData = ::std::option::Option::None;
    }

    pub fn has_aimedAbilityData(&self) -> bool {
        match self.abilityData {
            ::std::option::Option::Some(Ability_oneof_abilityData::aimedAbilityData(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_aimedAbilityData(&mut self, v: Ability_AimedAbilityData) {
        self.abilityData = ::std::option::Option::Some(Ability_oneof_abilityData::aimedAbilityData(v))
    }

    // Mutable pointer to the field.
    pub fn mut_aimedAbilityData(&mut self) -> &mut Ability_AimedAbilityData {
        if let ::std::option::Option::Some(Ability_oneof_abilityData::aimedAbilityData(_)) = self.abilityData {
        } else {
            self.abilityData = ::std::option::Option::Some(Ability_oneof_abilityData::aimedAbilityData(Ability_AimedAbilityData::new()));
        }
        match self.abilityData {
            ::std::option::Option::Some(Ability_oneof_abilityData::aimedAbilityData(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_aimedAbilityData(&mut self) -> Ability_AimedAbilityData {
        if self.has_aimedAbilityData() {
            match self.abilityData.take() {
                ::std::option::Option::Some(Ability_oneof_abilityData::aimedAbilityData(v)) => v,
                _ => panic!(),
            }
        } else {
            Ability_AimedAbilityData::new()
        }
    }
}

impl ::protobuf::Message for Ability {
    fn is_initialized(&self) -> bool {
        if let Some(Ability_oneof_abilityData::targetedAbilityData(ref v)) = self.abilityData {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Ability_oneof_abilityData::aimedAbilityData(ref v)) = self.abilityData {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.abilityID = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.abilityData = ::std::option::Option::Some(Ability_oneof_abilityData::targetedAbilityData(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.abilityData = ::std::option::Option::Some(Ability_oneof_abilityData::aimedAbilityData(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.abilityID != 0 {
            my_size += ::protobuf::rt::value_size(1, self.abilityID, ::protobuf::wire_format::WireTypeVarint);
        }
        if let ::std::option::Option::Some(ref v) = self.abilityData {
            match v {
                &Ability_oneof_abilityData::targetedAbilityData(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Ability_oneof_abilityData::aimedAbilityData(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.abilityID != 0 {
            os.write_int32(1, self.abilityID)?;
        }
        if let ::std::option::Option::Some(ref v) = self.abilityData {
            match v {
                &Ability_oneof_abilityData::targetedAbilityData(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Ability_oneof_abilityData::aimedAbilityData(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Ability {
        Ability::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "abilityID",
                    |m: &Ability| { &m.abilityID },
                    |m: &mut Ability| { &mut m.abilityID },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Ability_TargetedAbilityData>(
                    "targetedAbilityData",
                    Ability::has_targetedAbilityData,
                    Ability::get_targetedAbilityData,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Ability_AimedAbilityData>(
                    "aimedAbilityData",
                    Ability::has_aimedAbilityData,
                    Ability::get_aimedAbilityData,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Ability>(
                    "Ability",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Ability {
        static mut instance: ::protobuf::lazy::Lazy<Ability> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Ability,
        };
        unsafe {
            instance.get(Ability::new)
        }
    }
}

impl ::protobuf::Clear for Ability {
    fn clear(&mut self) {
        self.abilityID = 0;
        self.abilityData = ::std::option::Option::None;
        self.abilityData = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Ability {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Ability {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Ability_TargetedAbilityData {
    // message fields
    pub target: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Ability_TargetedAbilityData {
    fn default() -> &'a Ability_TargetedAbilityData {
        <Ability_TargetedAbilityData as ::protobuf::Message>::default_instance()
    }
}

impl Ability_TargetedAbilityData {
    pub fn new() -> Ability_TargetedAbilityData {
        ::std::default::Default::default()
    }

    // uint32 target = 1;


    pub fn get_target(&self) -> u32 {
        self.target
    }
    pub fn clear_target(&mut self) {
        self.target = 0;
    }

    // Param is passed by value, moved
    pub fn set_target(&mut self, v: u32) {
        self.target = v;
    }
}

impl ::protobuf::Message for Ability_TargetedAbilityData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.target = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.target != 0 {
            my_size += ::protobuf::rt::value_size(1, self.target, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.target != 0 {
            os.write_uint32(1, self.target)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Ability_TargetedAbilityData {
        Ability_TargetedAbilityData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "target",
                    |m: &Ability_TargetedAbilityData| { &m.target },
                    |m: &mut Ability_TargetedAbilityData| { &mut m.target },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Ability_TargetedAbilityData>(
                    "Ability_TargetedAbilityData",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Ability_TargetedAbilityData {
        static mut instance: ::protobuf::lazy::Lazy<Ability_TargetedAbilityData> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Ability_TargetedAbilityData,
        };
        unsafe {
            instance.get(Ability_TargetedAbilityData::new)
        }
    }
}

impl ::protobuf::Clear for Ability_TargetedAbilityData {
    fn clear(&mut self) {
        self.target = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Ability_TargetedAbilityData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Ability_TargetedAbilityData {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Ability_AimedAbilityData {
    // message fields
    pub x: f32,
    pub y: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Ability_AimedAbilityData {
    fn default() -> &'a Ability_AimedAbilityData {
        <Ability_AimedAbilityData as ::protobuf::Message>::default_instance()
    }
}

impl Ability_AimedAbilityData {
    pub fn new() -> Ability_AimedAbilityData {
        ::std::default::Default::default()
    }

    // float x = 1;


    pub fn get_x(&self) -> f32 {
        self.x
    }
    pub fn clear_x(&mut self) {
        self.x = 0.;
    }

    // Param is passed by value, moved
    pub fn set_x(&mut self, v: f32) {
        self.x = v;
    }

    // float y = 2;


    pub fn get_y(&self) -> f32 {
        self.y
    }
    pub fn clear_y(&mut self) {
        self.y = 0.;
    }

    // Param is passed by value, moved
    pub fn set_y(&mut self, v: f32) {
        self.y = v;
    }
}

impl ::protobuf::Message for Ability_AimedAbilityData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.x = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.y = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.x != 0. {
            my_size += 5;
        }
        if self.y != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.x != 0. {
            os.write_float(1, self.x)?;
        }
        if self.y != 0. {
            os.write_float(2, self.y)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Ability_AimedAbilityData {
        Ability_AimedAbilityData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "x",
                    |m: &Ability_AimedAbilityData| { &m.x },
                    |m: &mut Ability_AimedAbilityData| { &mut m.x },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "y",
                    |m: &Ability_AimedAbilityData| { &m.y },
                    |m: &mut Ability_AimedAbilityData| { &mut m.y },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Ability_AimedAbilityData>(
                    "Ability_AimedAbilityData",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Ability_AimedAbilityData {
        static mut instance: ::protobuf::lazy::Lazy<Ability_AimedAbilityData> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Ability_AimedAbilityData,
        };
        unsafe {
            instance.get(Ability_AimedAbilityData::new)
        }
    }
}

impl ::protobuf::Clear for Ability_AimedAbilityData {
    fn clear(&mut self) {
        self.x = 0.;
        self.y = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Ability_AimedAbilityData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Ability_AimedAbilityData {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Ability_AbilityDataType {
    SIMPLE = 0,
    TARGETED = 1,
    AIMED = 2,
}

impl ::protobuf::ProtobufEnum for Ability_AbilityDataType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Ability_AbilityDataType> {
        match value {
            0 => ::std::option::Option::Some(Ability_AbilityDataType::SIMPLE),
            1 => ::std::option::Option::Some(Ability_AbilityDataType::TARGETED),
            2 => ::std::option::Option::Some(Ability_AbilityDataType::AIMED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Ability_AbilityDataType] = &[
            Ability_AbilityDataType::SIMPLE,
            Ability_AbilityDataType::TARGETED,
            Ability_AbilityDataType::AIMED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Ability_AbilityDataType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Ability_AbilityDataType {
}

impl ::std::default::Default for Ability_AbilityDataType {
    fn default() -> Self {
        Ability_AbilityDataType::SIMPLE
    }
}

impl ::protobuf::reflect::ProtobufValue for Ability_AbilityDataType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13ClientMessage.proto\"\xee\x01\n\rClientMessage\x12&\n\x03ack\x18\
    \x01\x20\x01(\x0b2\x12.ClientMessage.AckH\0R\x03ack\x12$\n\x07command\
    \x18\x02\x20\x01(\x0b2\x08.CommandH\0R\x07command\x12:\n\nveryfiyRtc\x18\
    d\x20\x01(\x0b2\x18.ClientMessage.VerifyRtcH\0R\nveryfiyRtc\x1a'\n\x03Ac\
    k\x12\x20\n\x0bnewBaseline\x18\x01\x20\x01(\rR\x0bnewBaseline\x1a\x1f\n\
    \tVerifyRtc\x12\x12\n\x04uuid\x18\x01\x20\x01(\tR\x04uuidB\t\n\x07msgDat\
    a\"\xc7\x03\n\x07Command\x128\n\x0bmoveCommand\x18\x01\x20\x01(\x0b2\x14\
    .Command.MoveCommandH\0R\x0bmoveCommand\x122\n\tmoveDelta\x18\x02\x20\
    \x01(\x0b2\x12.Command.MoveDeltaH\0R\tmoveDelta\x12)\n\x06attack\x18\x03\
    \x20\x01(\x0b2\x0f.Command.AttackH\0R\x06attack\x12$\n\x07ability\x18\
    \x04\x20\x01(\x0b2\x08.AbilityH\0R\x07ability\x12#\n\x04stop\x18\x05\x20\
    \x01(\x0b2\r.Command.StopH\0R\x04stop\x12)\n\x06recall\x18\x06\x20\x01(\
    \x0b2\x0f.Command.RecallH\0R\x06recall\x1aE\n\x0bMoveCommand\x12\x0c\n\
    \x01x\x18\x01\x20\x01(\x02R\x01x\x12\x0c\n\x01y\x18\x02\x20\x01(\x02R\
    \x01y\x12\x1a\n\x08isAttack\x18\x03\x20\x01(\x08R\x08isAttack\x1a'\n\tMo\
    veDelta\x12\x0c\n\x01x\x18\x01\x20\x01(\x02R\x01x\x12\x0c\n\x01y\x18\x02\
    \x20\x01(\x02R\x01y\x1a\x20\n\x06Attack\x12\x16\n\x06target\x18\x01\x20\
    \x01(\rR\x06target\x1a\x06\n\x04Stop\x1a\x08\n\x06RecallB\t\n\x07command\
    \"\xe8\x02\n\x07Ability\x12\x1c\n\tabilityID\x18\x01\x20\x01(\x05R\tabil\
    ityID\x12P\n\x13targetedAbilityData\x18\x02\x20\x01(\x0b2\x1c.Ability.Ta\
    rgetedAbilityDataH\0R\x13targetedAbilityData\x12G\n\x10aimedAbilityData\
    \x18\x03\x20\x01(\x0b2\x19.Ability.AimedAbilityDataH\0R\x10aimedAbilityD\
    ata\x1a-\n\x13TargetedAbilityData\x12\x16\n\x06target\x18\x01\x20\x01(\r\
    R\x06target\x1a.\n\x10AimedAbilityData\x12\x0c\n\x01x\x18\x01\x20\x01(\
    \x02R\x01x\x12\x0c\n\x01y\x18\x02\x20\x01(\x02R\x01y\"6\n\x0fAbilityData\
    Type\x12\n\n\x06SIMPLE\x10\0\x12\x0c\n\x08TARGETED\x10\x01\x12\t\n\x05AI\
    MED\x10\x02B\r\n\x0babilityDataJ\xc6\x0f\n\x06\x12\x04\0\0G\x01\n\x08\n\
    \x01\x0c\x12\x03\0\0\x12\n\n\n\x02\x04\0\x12\x04\x02\0\x10\x01\n\n\n\x03\
    \x04\0\x01\x12\x03\x02\x08\x15\n\x0c\n\x04\x04\0\x03\0\x12\x04\x03\x02\
    \x05\x03\n\x0c\n\x05\x04\0\x03\0\x01\x12\x03\x03\n\r\n\r\n\x06\x04\0\x03\
    \0\x02\0\x12\x03\x04\x04\x1b\n\x0e\n\x07\x04\0\x03\0\x02\0\x05\x12\x03\
    \x04\x04\n\n\x0e\n\x07\x04\0\x03\0\x02\0\x01\x12\x03\x04\x0b\x16\n\x0e\n\
    \x07\x04\0\x03\0\x02\0\x03\x12\x03\x04\x19\x1a\n\x0c\n\x04\x04\0\x03\x01\
    \x12\x04\x07\x02\t\x03\n\x0c\n\x05\x04\0\x03\x01\x01\x12\x03\x07\n\x13\n\
    \r\n\x06\x04\0\x03\x01\x02\0\x12\x03\x08\x04\x14\n\x0e\n\x07\x04\0\x03\
    \x01\x02\0\x05\x12\x03\x08\x04\n\n\x0e\n\x07\x04\0\x03\x01\x02\0\x01\x12\
    \x03\x08\x0b\x0f\n\x0e\n\x07\x04\0\x03\x01\x02\0\x03\x12\x03\x08\x12\x13\
    \n\x0c\n\x04\x04\0\x08\0\x12\x04\x0b\x02\x0f\x03\n\x0c\n\x05\x04\0\x08\0\
    \x01\x12\x03\x0b\x08\x0f\n\x0b\n\x04\x04\0\x02\0\x12\x03\x0c\x04\x10\n\
    \x0c\n\x05\x04\0\x02\0\x06\x12\x03\x0c\x04\x07\n\x0c\n\x05\x04\0\x02\0\
    \x01\x12\x03\x0c\x08\x0b\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0c\x0e\x0f\
    \n\x0b\n\x04\x04\0\x02\x01\x12\x03\r\x04\x18\n\x0c\n\x05\x04\0\x02\x01\
    \x06\x12\x03\r\x04\x0b\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\r\x0c\x13\n\
    \x0c\n\x05\x04\0\x02\x01\x03\x12\x03\r\x16\x17\n\x0b\n\x04\x04\0\x02\x02\
    \x12\x03\x0e\x04\x1f\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03\x0e\x04\r\n\
    \x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x0e\x0e\x18\n\x0c\n\x05\x04\0\x02\
    \x02\x03\x12\x03\x0e\x1b\x1e\n\n\n\x02\x04\x01\x12\x04\x12\0-\x01\n\n\n\
    \x03\x04\x01\x01\x12\x03\x12\x08\x0f\n\x0c\n\x04\x04\x01\x03\0\x12\x04\
    \x13\x02\x17\x03\n\x0c\n\x05\x04\x01\x03\0\x01\x12\x03\x13\n\x15\n\r\n\
    \x06\x04\x01\x03\0\x02\0\x12\x03\x14\x04\x10\n\x0e\n\x07\x04\x01\x03\0\
    \x02\0\x05\x12\x03\x14\x04\t\n\x0e\n\x07\x04\x01\x03\0\x02\0\x01\x12\x03\
    \x14\n\x0b\n\x0e\n\x07\x04\x01\x03\0\x02\0\x03\x12\x03\x14\x0e\x0f\n\r\n\
    \x06\x04\x01\x03\0\x02\x01\x12\x03\x15\x04\x10\n\x0e\n\x07\x04\x01\x03\0\
    \x02\x01\x05\x12\x03\x15\x04\t\n\x0e\n\x07\x04\x01\x03\0\x02\x01\x01\x12\
    \x03\x15\n\x0b\n\x0e\n\x07\x04\x01\x03\0\x02\x01\x03\x12\x03\x15\x0e\x0f\
    \n\r\n\x06\x04\x01\x03\0\x02\x02\x12\x03\x16\x04\x16\n\x0e\n\x07\x04\x01\
    \x03\0\x02\x02\x05\x12\x03\x16\x04\x08\n\x0e\n\x07\x04\x01\x03\0\x02\x02\
    \x01\x12\x03\x16\t\x11\n\x0e\n\x07\x04\x01\x03\0\x02\x02\x03\x12\x03\x16\
    \x14\x15\n\x0c\n\x04\x04\x01\x03\x01\x12\x04\x19\x02\x1c\x03\n\x0c\n\x05\
    \x04\x01\x03\x01\x01\x12\x03\x19\n\x13\n\r\n\x06\x04\x01\x03\x01\x02\0\
    \x12\x03\x1a\x04\x10\n\x0e\n\x07\x04\x01\x03\x01\x02\0\x05\x12\x03\x1a\
    \x04\t\n\x0e\n\x07\x04\x01\x03\x01\x02\0\x01\x12\x03\x1a\n\x0b\n\x0e\n\
    \x07\x04\x01\x03\x01\x02\0\x03\x12\x03\x1a\x0e\x0f\n\r\n\x06\x04\x01\x03\
    \x01\x02\x01\x12\x03\x1b\x04\x10\n\x0e\n\x07\x04\x01\x03\x01\x02\x01\x05\
    \x12\x03\x1b\x04\t\n\x0e\n\x07\x04\x01\x03\x01\x02\x01\x01\x12\x03\x1b\n\
    \x0b\n\x0e\n\x07\x04\x01\x03\x01\x02\x01\x03\x12\x03\x1b\x0e\x0f\n\x0c\n\
    \x04\x04\x01\x03\x02\x12\x04\x1e\x02\x20\x03\n\x0c\n\x05\x04\x01\x03\x02\
    \x01\x12\x03\x1e\n\x10\n\r\n\x06\x04\x01\x03\x02\x02\0\x12\x03\x1f\x04\
    \x16\n\x0e\n\x07\x04\x01\x03\x02\x02\0\x05\x12\x03\x1f\x04\n\n\x0e\n\x07\
    \x04\x01\x03\x02\x02\0\x01\x12\x03\x1f\x0b\x11\n\x0e\n\x07\x04\x01\x03\
    \x02\x02\0\x03\x12\x03\x1f\x14\x15\n\x0b\n\x04\x04\x01\x03\x03\x12\x03\"\
    \x02\x12\n\x0c\n\x05\x04\x01\x03\x03\x01\x12\x03\"\n\x0e\n\x0b\n\x04\x04\
    \x01\x03\x04\x12\x03#\x02\x14\n\x0c\n\x05\x04\x01\x03\x04\x01\x12\x03#\n\
    \x10\n\x0c\n\x04\x04\x01\x08\0\x12\x04%\x02,\x03\n\x0c\n\x05\x04\x01\x08\
    \0\x01\x12\x03%\x08\x0f\n\x0b\n\x04\x04\x01\x02\0\x12\x03&\x04\x20\n\x0c\
    \n\x05\x04\x01\x02\0\x06\x12\x03&\x04\x0f\n\x0c\n\x05\x04\x01\x02\0\x01\
    \x12\x03&\x10\x1b\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03&\x1e\x1f\n\x0b\n\
    \x04\x04\x01\x02\x01\x12\x03'\x04\x1c\n\x0c\n\x05\x04\x01\x02\x01\x06\
    \x12\x03'\x04\r\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03'\x0e\x17\n\x0c\n\
    \x05\x04\x01\x02\x01\x03\x12\x03'\x1a\x1b\n\x0b\n\x04\x04\x01\x02\x02\
    \x12\x03(\x04\x16\n\x0c\n\x05\x04\x01\x02\x02\x06\x12\x03(\x04\n\n\x0c\n\
    \x05\x04\x01\x02\x02\x01\x12\x03(\x0b\x11\n\x0c\n\x05\x04\x01\x02\x02\
    \x03\x12\x03(\x14\x15\n\x1f\n\x04\x04\x01\x02\x03\x12\x03)\x04\x18\"\x12\
    TODO\x20DEFINE\x20THIS!\n\n\x0c\n\x05\x04\x01\x02\x03\x06\x12\x03)\x04\
    \x0b\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03)\x0c\x13\n\x0c\n\x05\x04\
    \x01\x02\x03\x03\x12\x03)\x16\x17\n\x0b\n\x04\x04\x01\x02\x04\x12\x03*\
    \x04\x12\n\x0c\n\x05\x04\x01\x02\x04\x06\x12\x03*\x04\x08\n\x0c\n\x05\
    \x04\x01\x02\x04\x01\x12\x03*\t\r\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\
    \x03*\x10\x11\n\x0b\n\x04\x04\x01\x02\x05\x12\x03+\x04\x16\n\x0c\n\x05\
    \x04\x01\x02\x05\x06\x12\x03+\x04\n\n\x0c\n\x05\x04\x01\x02\x05\x01\x12\
    \x03+\x0b\x11\n\x0c\n\x05\x04\x01\x02\x05\x03\x12\x03+\x14\x15\n\n\n\x02\
    \x04\x02\x12\x04/\0G\x01\n\n\n\x03\x04\x02\x01\x12\x03/\x08\x0f\n\x15\n\
    \x04\x04\x02\x04\0\x12\x041\x025\x03\x1a\x07Define\n\n\x0c\n\x05\x04\x02\
    \x04\0\x01\x12\x031\x07\x16\n\r\n\x06\x04\x02\x04\0\x02\0\x12\x032\x04\
    \x0f\n\x0e\n\x07\x04\x02\x04\0\x02\0\x01\x12\x032\x04\n\n\x0e\n\x07\x04\
    \x02\x04\0\x02\0\x02\x12\x032\r\x0e\n\r\n\x06\x04\x02\x04\0\x02\x01\x12\
    \x033\x04\x11\n\x0e\n\x07\x04\x02\x04\0\x02\x01\x01\x12\x033\x04\x0c\n\
    \x0e\n\x07\x04\x02\x04\0\x02\x01\x02\x12\x033\x0f\x10\n\r\n\x06\x04\x02\
    \x04\0\x02\x02\x12\x034\x04\x0e\n\x0e\n\x07\x04\x02\x04\0\x02\x02\x01\
    \x12\x034\x04\t\n\x0e\n\x07\x04\x02\x04\0\x02\x02\x02\x12\x034\x0c\r\n\
    \x0c\n\x04\x04\x02\x03\0\x12\x047\x029\x03\n\x0c\n\x05\x04\x02\x03\0\x01\
    \x12\x037\n\x1d\n\r\n\x06\x04\x02\x03\0\x02\0\x12\x038\x04\x16\n\x0e\n\
    \x07\x04\x02\x03\0\x02\0\x05\x12\x038\x04\n\n\x0e\n\x07\x04\x02\x03\0\
    \x02\0\x01\x12\x038\x0b\x11\n\x0e\n\x07\x04\x02\x03\0\x02\0\x03\x12\x038\
    \x14\x15\n\x0c\n\x04\x04\x02\x03\x01\x12\x04;\x02>\x03\n\x0c\n\x05\x04\
    \x02\x03\x01\x01\x12\x03;\n\x1a\n\r\n\x06\x04\x02\x03\x01\x02\0\x12\x03<\
    \x04\x10\n\x0e\n\x07\x04\x02\x03\x01\x02\0\x05\x12\x03<\x04\t\n\x0e\n\
    \x07\x04\x02\x03\x01\x02\0\x01\x12\x03<\n\x0b\n\x0e\n\x07\x04\x02\x03\
    \x01\x02\0\x03\x12\x03<\x0e\x0f\n\r\n\x06\x04\x02\x03\x01\x02\x01\x12\
    \x03=\x04\x10\n\x0e\n\x07\x04\x02\x03\x01\x02\x01\x05\x12\x03=\x04\t\n\
    \x0e\n\x07\x04\x02\x03\x01\x02\x01\x01\x12\x03=\n\x0b\n\x0e\n\x07\x04\
    \x02\x03\x01\x02\x01\x03\x12\x03=\x0e\x0f\n\x1a\n\x04\x04\x02\x02\0\x12\
    \x03B\x02\x16\x1a\rMessage\x20Data\n\n\x0c\n\x05\x04\x02\x02\0\x05\x12\
    \x03B\x02\x07\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03B\x08\x11\n\x0c\n\x05\
    \x04\x02\x02\0\x03\x12\x03B\x14\x15\n\x0c\n\x04\x04\x02\x08\0\x12\x04C\
    \x02F\x03\n\x0c\n\x05\x04\x02\x08\0\x01\x12\x03C\x08\x13\n\x0b\n\x04\x04\
    \x02\x02\x01\x12\x03D\x040\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\x03D\x04\
    \x17\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03D\x18+\n\x0c\n\x05\x04\x02\
    \x02\x01\x03\x12\x03D./\n\x0b\n\x04\x04\x02\x02\x02\x12\x03E\x04*\n\x0c\
    \n\x05\x04\x02\x02\x02\x06\x12\x03E\x04\x14\n\x0c\n\x05\x04\x02\x02\x02\
    \x01\x12\x03E\x15%\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03E()b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}

// This file is generated by rust-protobuf 2.10.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `ClientMessage.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_10_1;

#[derive(PartialEq,Clone,Default)]
pub struct ClientMessage {
    // message fields
    pub msgType: ClientMessage_ClientMessageType,
    // message oneof groups
    pub msgData: ::std::option::Option<ClientMessage_oneof_msgData>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientMessage {
    fn default() -> &'a ClientMessage {
        <ClientMessage as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ClientMessage_oneof_msgData {
    moveCommand(ClientMessage_MoveCommand),
    veryfiyRtc(ClientMessage_VerifyRtc),
}

impl ClientMessage {
    pub fn new() -> ClientMessage {
        ::std::default::Default::default()
    }

    // .ClientMessage.ClientMessageType msgType = 1;


    pub fn get_msgType(&self) -> ClientMessage_ClientMessageType {
        self.msgType
    }
    pub fn clear_msgType(&mut self) {
        self.msgType = ClientMessage_ClientMessageType::NONE;
    }

    // Param is passed by value, moved
    pub fn set_msgType(&mut self, v: ClientMessage_ClientMessageType) {
        self.msgType = v;
    }

    // .ClientMessage.MoveCommand moveCommand = 2;


    pub fn get_moveCommand(&self) -> &ClientMessage_MoveCommand {
        match self.msgData {
            ::std::option::Option::Some(ClientMessage_oneof_msgData::moveCommand(ref v)) => v,
            _ => ClientMessage_MoveCommand::default_instance(),
        }
    }
    pub fn clear_moveCommand(&mut self) {
        self.msgData = ::std::option::Option::None;
    }

    pub fn has_moveCommand(&self) -> bool {
        match self.msgData {
            ::std::option::Option::Some(ClientMessage_oneof_msgData::moveCommand(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_moveCommand(&mut self, v: ClientMessage_MoveCommand) {
        self.msgData = ::std::option::Option::Some(ClientMessage_oneof_msgData::moveCommand(v))
    }

    // Mutable pointer to the field.
    pub fn mut_moveCommand(&mut self) -> &mut ClientMessage_MoveCommand {
        if let ::std::option::Option::Some(ClientMessage_oneof_msgData::moveCommand(_)) = self.msgData {
        } else {
            self.msgData = ::std::option::Option::Some(ClientMessage_oneof_msgData::moveCommand(ClientMessage_MoveCommand::new()));
        }
        match self.msgData {
            ::std::option::Option::Some(ClientMessage_oneof_msgData::moveCommand(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_moveCommand(&mut self) -> ClientMessage_MoveCommand {
        if self.has_moveCommand() {
            match self.msgData.take() {
                ::std::option::Option::Some(ClientMessage_oneof_msgData::moveCommand(v)) => v,
                _ => panic!(),
            }
        } else {
            ClientMessage_MoveCommand::new()
        }
    }

    // .ClientMessage.VerifyRtc veryfiyRtc = 100;


    pub fn get_veryfiyRtc(&self) -> &ClientMessage_VerifyRtc {
        match self.msgData {
            ::std::option::Option::Some(ClientMessage_oneof_msgData::veryfiyRtc(ref v)) => v,
            _ => ClientMessage_VerifyRtc::default_instance(),
        }
    }
    pub fn clear_veryfiyRtc(&mut self) {
        self.msgData = ::std::option::Option::None;
    }

    pub fn has_veryfiyRtc(&self) -> bool {
        match self.msgData {
            ::std::option::Option::Some(ClientMessage_oneof_msgData::veryfiyRtc(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_veryfiyRtc(&mut self, v: ClientMessage_VerifyRtc) {
        self.msgData = ::std::option::Option::Some(ClientMessage_oneof_msgData::veryfiyRtc(v))
    }

    // Mutable pointer to the field.
    pub fn mut_veryfiyRtc(&mut self) -> &mut ClientMessage_VerifyRtc {
        if let ::std::option::Option::Some(ClientMessage_oneof_msgData::veryfiyRtc(_)) = self.msgData {
        } else {
            self.msgData = ::std::option::Option::Some(ClientMessage_oneof_msgData::veryfiyRtc(ClientMessage_VerifyRtc::new()));
        }
        match self.msgData {
            ::std::option::Option::Some(ClientMessage_oneof_msgData::veryfiyRtc(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_veryfiyRtc(&mut self) -> ClientMessage_VerifyRtc {
        if self.has_veryfiyRtc() {
            match self.msgData.take() {
                ::std::option::Option::Some(ClientMessage_oneof_msgData::veryfiyRtc(v)) => v,
                _ => panic!(),
            }
        } else {
            ClientMessage_VerifyRtc::new()
        }
    }
}

impl ::protobuf::Message for ClientMessage {
    fn is_initialized(&self) -> bool {
        if let Some(ClientMessage_oneof_msgData::moveCommand(ref v)) = self.msgData {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ClientMessage_oneof_msgData::veryfiyRtc(ref v)) = self.msgData {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.msgType, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.msgData = ::std::option::Option::Some(ClientMessage_oneof_msgData::moveCommand(is.read_message()?));
                },
                100 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.msgData = ::std::option::Option::Some(ClientMessage_oneof_msgData::veryfiyRtc(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.msgType != ClientMessage_ClientMessageType::NONE {
            my_size += ::protobuf::rt::enum_size(1, self.msgType);
        }
        if let ::std::option::Option::Some(ref v) = self.msgData {
            match v {
                &ClientMessage_oneof_msgData::moveCommand(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ClientMessage_oneof_msgData::veryfiyRtc(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.msgType != ClientMessage_ClientMessageType::NONE {
            os.write_enum(1, self.msgType.value())?;
        }
        if let ::std::option::Option::Some(ref v) = self.msgData {
            match v {
                &ClientMessage_oneof_msgData::moveCommand(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ClientMessage_oneof_msgData::veryfiyRtc(ref v) => {
                    os.write_tag(100, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientMessage {
        ClientMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ClientMessage_ClientMessageType>>(
                    "msgType",
                    |m: &ClientMessage| { &m.msgType },
                    |m: &mut ClientMessage| { &mut m.msgType },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ClientMessage_MoveCommand>(
                    "moveCommand",
                    ClientMessage::has_moveCommand,
                    ClientMessage::get_moveCommand,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ClientMessage_VerifyRtc>(
                    "veryfiyRtc",
                    ClientMessage::has_veryfiyRtc,
                    ClientMessage::get_veryfiyRtc,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ClientMessage>(
                    "ClientMessage",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ClientMessage {
        static mut instance: ::protobuf::lazy::Lazy<ClientMessage> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ClientMessage,
        };
        unsafe {
            instance.get(ClientMessage::new)
        }
    }
}

impl ::protobuf::Clear for ClientMessage {
    fn clear(&mut self) {
        self.msgType = ClientMessage_ClientMessageType::NONE;
        self.msgData = ::std::option::Option::None;
        self.msgData = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientMessage_MoveCommand {
    // message fields
    pub x: f32,
    pub y: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientMessage_MoveCommand {
    fn default() -> &'a ClientMessage_MoveCommand {
        <ClientMessage_MoveCommand as ::protobuf::Message>::default_instance()
    }
}

impl ClientMessage_MoveCommand {
    pub fn new() -> ClientMessage_MoveCommand {
        ::std::default::Default::default()
    }

    // float x = 1;


    pub fn get_x(&self) -> f32 {
        self.x
    }
    pub fn clear_x(&mut self) {
        self.x = 0.;
    }

    // Param is passed by value, moved
    pub fn set_x(&mut self, v: f32) {
        self.x = v;
    }

    // float y = 2;


    pub fn get_y(&self) -> f32 {
        self.y
    }
    pub fn clear_y(&mut self) {
        self.y = 0.;
    }

    // Param is passed by value, moved
    pub fn set_y(&mut self, v: f32) {
        self.y = v;
    }
}

impl ::protobuf::Message for ClientMessage_MoveCommand {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.x = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.y = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.x != 0. {
            my_size += 5;
        }
        if self.y != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.x != 0. {
            os.write_float(1, self.x)?;
        }
        if self.y != 0. {
            os.write_float(2, self.y)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientMessage_MoveCommand {
        ClientMessage_MoveCommand::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "x",
                    |m: &ClientMessage_MoveCommand| { &m.x },
                    |m: &mut ClientMessage_MoveCommand| { &mut m.x },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "y",
                    |m: &ClientMessage_MoveCommand| { &m.y },
                    |m: &mut ClientMessage_MoveCommand| { &mut m.y },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ClientMessage_MoveCommand>(
                    "ClientMessage_MoveCommand",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ClientMessage_MoveCommand {
        static mut instance: ::protobuf::lazy::Lazy<ClientMessage_MoveCommand> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ClientMessage_MoveCommand,
        };
        unsafe {
            instance.get(ClientMessage_MoveCommand::new)
        }
    }
}

impl ::protobuf::Clear for ClientMessage_MoveCommand {
    fn clear(&mut self) {
        self.x = 0.;
        self.y = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientMessage_MoveCommand {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientMessage_MoveCommand {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientMessage_VerifyRtc {
    // message fields
    pub uuid: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientMessage_VerifyRtc {
    fn default() -> &'a ClientMessage_VerifyRtc {
        <ClientMessage_VerifyRtc as ::protobuf::Message>::default_instance()
    }
}

impl ClientMessage_VerifyRtc {
    pub fn new() -> ClientMessage_VerifyRtc {
        ::std::default::Default::default()
    }

    // string uuid = 1;


    pub fn get_uuid(&self) -> &str {
        &self.uuid
    }
    pub fn clear_uuid(&mut self) {
        self.uuid.clear();
    }

    // Param is passed by value, moved
    pub fn set_uuid(&mut self, v: ::std::string::String) {
        self.uuid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uuid(&mut self) -> &mut ::std::string::String {
        &mut self.uuid
    }

    // Take field
    pub fn take_uuid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.uuid, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ClientMessage_VerifyRtc {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.uuid)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.uuid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.uuid);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.uuid.is_empty() {
            os.write_string(1, &self.uuid)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientMessage_VerifyRtc {
        ClientMessage_VerifyRtc::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "uuid",
                    |m: &ClientMessage_VerifyRtc| { &m.uuid },
                    |m: &mut ClientMessage_VerifyRtc| { &mut m.uuid },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ClientMessage_VerifyRtc>(
                    "ClientMessage_VerifyRtc",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ClientMessage_VerifyRtc {
        static mut instance: ::protobuf::lazy::Lazy<ClientMessage_VerifyRtc> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ClientMessage_VerifyRtc,
        };
        unsafe {
            instance.get(ClientMessage_VerifyRtc::new)
        }
    }
}

impl ::protobuf::Clear for ClientMessage_VerifyRtc {
    fn clear(&mut self) {
        self.uuid.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientMessage_VerifyRtc {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientMessage_VerifyRtc {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ClientMessage_ClientMessageType {
    NONE = 0,
    MOVE = 1,
    VERIFYRTC = 100,
}

impl ::protobuf::ProtobufEnum for ClientMessage_ClientMessageType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ClientMessage_ClientMessageType> {
        match value {
            0 => ::std::option::Option::Some(ClientMessage_ClientMessageType::NONE),
            1 => ::std::option::Option::Some(ClientMessage_ClientMessageType::MOVE),
            100 => ::std::option::Option::Some(ClientMessage_ClientMessageType::VERIFYRTC),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ClientMessage_ClientMessageType] = &[
            ClientMessage_ClientMessageType::NONE,
            ClientMessage_ClientMessageType::MOVE,
            ClientMessage_ClientMessageType::VERIFYRTC,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("ClientMessage_ClientMessageType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for ClientMessage_ClientMessageType {
}

impl ::std::default::Default for ClientMessage_ClientMessageType {
    fn default() -> Self {
        ClientMessage_ClientMessageType::NONE
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientMessage_ClientMessageType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13ClientMessage.proto\"\xd6\x02\n\rClientMessage\x12:\n\x07msgType\
    \x18\x01\x20\x01(\x0e2\x20.ClientMessage.ClientMessageTypeR\x07msgType\
    \x12>\n\x0bmoveCommand\x18\x02\x20\x01(\x0b2\x1a.ClientMessage.MoveComma\
    ndH\0R\x0bmoveCommand\x12:\n\nveryfiyRtc\x18d\x20\x01(\x0b2\x18.ClientMe\
    ssage.VerifyRtcH\0R\nveryfiyRtc\x1a)\n\x0bMoveCommand\x12\x0c\n\x01x\x18\
    \x01\x20\x01(\x02R\x01x\x12\x0c\n\x01y\x18\x02\x20\x01(\x02R\x01y\x1a\
    \x1f\n\tVerifyRtc\x12\x12\n\x04uuid\x18\x01\x20\x01(\tR\x04uuid\"6\n\x11\
    ClientMessageType\x12\x08\n\x04NONE\x10\0\x12\x08\n\x04MOVE\x10\x01\x12\
    \r\n\tVERIFYRTC\x10dB\t\n\x07msgDataJ\xa6\x05\n\x06\x12\x04\0\0\x1c\x01\
    \n\x08\n\x01\x0c\x12\x03\0\0\x12\n\n\n\x02\x04\0\x12\x04\x02\0\x1c\x01\n\
    \n\n\x03\x04\0\x01\x12\x03\x02\x08\x15\n\x0c\n\x04\x04\0\x04\0\x12\x04\
    \x03\x02\t\x03\n\x0c\n\x05\x04\0\x04\0\x01\x12\x03\x03\x07\x18\n\r\n\x06\
    \x04\0\x04\0\x02\0\x12\x03\x04\x04\r\n\x0e\n\x07\x04\0\x04\0\x02\0\x01\
    \x12\x03\x04\x04\x08\n\x0e\n\x07\x04\0\x04\0\x02\0\x02\x12\x03\x04\x0b\
    \x0c\n\r\n\x06\x04\0\x04\0\x02\x01\x12\x03\x05\x04\r\n\x0e\n\x07\x04\0\
    \x04\0\x02\x01\x01\x12\x03\x05\x04\x08\n\x0e\n\x07\x04\0\x04\0\x02\x01\
    \x02\x12\x03\x05\x0b\x0c\n\r\n\x06\x04\0\x04\0\x02\x02\x12\x03\x08\x04\
    \x14\n\x0e\n\x07\x04\0\x04\0\x02\x02\x01\x12\x03\x08\x04\r\n\x0e\n\x07\
    \x04\0\x04\0\x02\x02\x02\x12\x03\x08\x10\x13\n\x0c\n\x04\x04\0\x03\0\x12\
    \x04\x0b\x02\x0e\x03\n\x0c\n\x05\x04\0\x03\0\x01\x12\x03\x0b\n\x15\n\r\n\
    \x06\x04\0\x03\0\x02\0\x12\x03\x0c\x04\x10\n\x0e\n\x07\x04\0\x03\0\x02\0\
    \x05\x12\x03\x0c\x04\t\n\x0e\n\x07\x04\0\x03\0\x02\0\x01\x12\x03\x0c\n\
    \x0b\n\x0e\n\x07\x04\0\x03\0\x02\0\x03\x12\x03\x0c\x0e\x0f\n\r\n\x06\x04\
    \0\x03\0\x02\x01\x12\x03\r\x04\x10\n\x0e\n\x07\x04\0\x03\0\x02\x01\x05\
    \x12\x03\r\x04\t\n\x0e\n\x07\x04\0\x03\0\x02\x01\x01\x12\x03\r\n\x0b\n\
    \x0e\n\x07\x04\0\x03\0\x02\x01\x03\x12\x03\r\x0e\x0f\n\x0c\n\x04\x04\0\
    \x03\x01\x12\x04\x10\x02\x12\x03\n\x0c\n\x05\x04\0\x03\x01\x01\x12\x03\
    \x10\n\x13\n\r\n\x06\x04\0\x03\x01\x02\0\x12\x03\x11\x04\x14\n\x0e\n\x07\
    \x04\0\x03\x01\x02\0\x05\x12\x03\x11\x04\n\n\x0e\n\x07\x04\0\x03\x01\x02\
    \0\x01\x12\x03\x11\x0b\x0f\n\x0e\n\x07\x04\0\x03\x01\x02\0\x03\x12\x03\
    \x11\x12\x13\n(\n\x04\x04\0\x02\0\x12\x03\x16\x02\x20\x1a\x1bDefine\x20a\
    ctual\x20message\x20Data\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x16\x02\
    \x13\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x16\x14\x1b\n\x0c\n\x05\x04\0\
    \x02\0\x03\x12\x03\x16\x1e\x1f\n\x0c\n\x04\x04\0\x08\0\x12\x04\x18\x02\
    \x1b\x03\n\x0c\n\x05\x04\0\x08\0\x01\x12\x03\x18\x08\x0f\n\x0b\n\x04\x04\
    \0\x02\x01\x12\x03\x19\x04\x20\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x19\
    \x04\x0f\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x19\x10\x1b\n\x0c\n\x05\
    \x04\0\x02\x01\x03\x12\x03\x19\x1e\x1f\n\x0b\n\x04\x04\0\x02\x02\x12\x03\
    \x1a\x04\x1f\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03\x1a\x04\r\n\x0c\n\x05\
    \x04\0\x02\x02\x01\x12\x03\x1a\x0e\x18\n\x0c\n\x05\x04\0\x02\x02\x03\x12\
    \x03\x1a\x1b\x1eb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
